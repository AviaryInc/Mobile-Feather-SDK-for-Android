com.aviary.android.feather.Constants -> com.aviary.android.feather.ao:
    android.os.Bundle mOriginalBundle -> a
    int MAX_IMAGE_SIZE_LOCAL -> b
    int MAX_MEMORY -> c
    int SCREEN_WIDTH -> d
    int SCREEN_HEIGHT -> e
    void init(android.app.Activity) -> a
    java.lang.Object getValueFromIntent(java.lang.String,java.lang.Object) -> a
    boolean containsValue(java.lang.String) -> a
    int getManagedMaxImageSize() -> a
    int getApplicationMaxMemory() -> b
com.aviary.android.feather.FeatherActivity -> com.aviary.android.feather.FeatherActivity:
    int pResultCode -> a
    com.aviary.android.feather.widget.ToolbarView mToolbar -> b
    com.aviary.android.feather.widget.wp.Workspace mWorkspace -> c
    android.widget.ViewAnimator mViewFlipper -> d
    it.sephiroth.android.library.imagezoom.ImageViewTouch mImageView -> e
    android.view.ViewGroup mDrawingViewContainer -> f
    android.view.View mInlineProgressLoader -> g
    com.aviary.android.feather.FilterManager mFilterManager -> h
    java.lang.String mApiKey -> i
    android.net.Uri mOriginalUri -> j
    android.net.Uri mSaveUri -> k
    java.util.List mToolList -> l
    android.graphics.Bitmap$CompressFormat mOutputFormat -> m
    int mItemsPerPage -> n
    int mScreenCols -> o
    int mScreenRows -> p
    com.aviary.android.feather.widget.wp.WorkspaceIndicator mWorkspaceIndicator -> q
    boolean mSaving -> r
    int mOrientation -> s
    com.aviary.android.feather.widget.BottombarViewFlipper mBottomBarFlipper -> t
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> u
    android.os.Handler mHandler -> v
    boolean mHideExitAlertConfirmation -> w
    android.os.Handler mUIHandler -> x
    android.content.BroadcastReceiver mDefaultReceiver -> y
    java.util.List mListEntries -> z
    android.widget.ViewFlipper mToolbarContentAnimator -> A
    android.widget.ViewFlipper mToolbarMainAnimator -> B
    android.view.animation.Animation mMainViewAnimationIn -> C
    android.view.animation.Animation mMainViewAnimationOut -> D
    void onSetResult(int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void loadImage(android.net.Uri) -> a
    void initWorkspace() -> o
    void onContentChanged() -> onContentChanged
    void onBackPressed() -> onBackPressed
    void onBackPressed$1385ff() -> e
    void loadFilters() -> p
    com.aviary.android.feather.widget.ToolbarView getToolbar() -> f
    android.view.ViewGroup getOptionsPanelContainer() -> g
    com.aviary.android.feather.widget.BottombarViewFlipper getBottomBar() -> h
    android.view.ViewGroup getDrawingImageContainer() -> i
    void onSaveClick() -> a
    void onApplyClick() -> b
    void onDownloadComplete(android.graphics.Bitmap) -> a
    void onDownloadError(java.lang.String) -> a
    void hideProgressLoader() -> q
    void onDownloadStart() -> d
    void onToolCompleted() -> c
    void showToolProgress() -> j
    void hideToolProgress() -> k
    void hideInfoScreen() -> r
    boolean isInfoScreenVisible() -> s
    void resetToolIndicator() -> l
    void onStart() -> onStart
    void onStop() -> onStop
    void onRestart() -> onRestart
    void onResume() -> onResume
    void onImageSize(java.lang.String,java.lang.String,java.lang.String) -> a
    void onPageChanged(int) -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase getMainImage() -> m
    com.aviary.android.feather.widget.ToolbarView access$1(com.aviary.android.feather.FeatherActivity) -> a
    com.aviary.android.feather.FilterManager access$2(com.aviary.android.feather.FeatherActivity) -> b
    com.aviary.android.feather.widget.wp.Workspace access$3(com.aviary.android.feather.FeatherActivity) -> c
    int access$4(com.aviary.android.feather.FeatherActivity) -> d
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$5() -> n
    int access$6(com.aviary.android.feather.FeatherActivity) -> e
    void access$7(com.aviary.android.feather.FeatherActivity) -> f
    void access$8(com.aviary.android.feather.FeatherActivity) -> g
    void access$9(com.aviary.android.feather.FeatherActivity) -> h
    void access$10(com.aviary.android.feather.FeatherActivity) -> i
    void access$11(com.aviary.android.feather.FeatherActivity) -> j
    android.os.Handler access$12(com.aviary.android.feather.FeatherActivity) -> k
    android.view.View access$13(com.aviary.android.feather.FeatherActivity) -> l
    void access$14(com.aviary.android.feather.FeatherActivity,android.graphics.Bitmap) -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouch access$15(com.aviary.android.feather.FeatherActivity) -> m
    android.widget.ViewFlipper access$16(com.aviary.android.feather.FeatherActivity) -> n
    android.widget.ViewAnimator access$17(com.aviary.android.feather.FeatherActivity) -> o
com.aviary.android.feather.FeatherActivity$1 -> com.aviary.android.feather.n:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.FeatherActivity$10 -> com.aviary.android.feather.w:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.graphics.Bitmap val$b -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$11 -> com.aviary.android.feather.x:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void run() -> run
com.aviary.android.feather.FeatherActivity$12 -> com.aviary.android.feather.aa:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void run() -> run
com.aviary.android.feather.FeatherActivity$13 -> com.aviary.android.feather.ab:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.FeatherActivity$14 -> com.aviary.android.feather.y:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$15 -> com.aviary.android.feather.z:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$2 -> com.aviary.android.feather.m:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aviary.android.feather.FeatherActivity$3 -> com.aviary.android.feather.s:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$4 -> com.aviary.android.feather.r:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$5 -> com.aviary.android.feather.u:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$6 -> com.aviary.android.feather.t:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$7 -> com.aviary.android.feather.p:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.content.res.Configuration val$newConfig -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$7$1 -> com.aviary.android.feather.aj:
    com.aviary.android.feather.FeatherActivity$7 this$1 -> a
    void run() -> run
com.aviary.android.feather.FeatherActivity$8 -> com.aviary.android.feather.o:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.FeatherActivity$9 -> com.aviary.android.feather.q:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.graphics.Bitmap val$bitmap -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$WorkspaceAdapter -> com.aviary.android.feather.am:
    android.view.LayoutInflater mLayoutInflater -> b
    int mResourceId -> c
    com.aviary.android.feather.FeatherActivity this$0 -> a
    int getCount() -> getCount
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.FeatherActivity$WorkspaceAdapter$1 -> com.aviary.android.feather.ah:
    com.aviary.android.feather.FeatherActivity$WorkspaceAdapter this$1 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.aviary.android.feather.FeatherActivity$WorkspaceAdapter$2 -> com.aviary.android.feather.af:
    com.aviary.android.feather.FeatherActivity$WorkspaceAdapter this$1 -> a
    com.aviary.android.feather.FeatherActivity$WorkspaceAdapter$WorkspaceToolViewHolder val$holder -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$WorkspaceAdapter$WorkspaceToolViewHolder -> com.aviary.android.feather.a:
    android.widget.ImageView image -> a
    android.widget.TextView text -> b
    com.aviary.android.feather.FeatherActivity$WorkspaceAdapter this$1 -> c
com.aviary.android.feather.FilterManager -> com.aviary.android.feather.FilterManager:
    android.graphics.Bitmap mBitmap -> a
    com.aviary.android.feather.FilterManager$FeatherContext mContext -> b
    com.aviary.android.feather.effects.AbstractEffectPanel mCurrentEffect -> c
    com.aviary.android.feather.library.content.EffectEntry mCurrentEntry -> d
    com.aviary.android.feather.FilterManager$STATE mCurrentState -> e
    android.view.LayoutInflater mLayoutInflater -> f
    com.aviary.android.feather.FilterManager$OnToolListener mToolListener -> g
    android.os.Handler mHandler -> h
    com.aviary.android.feather.library.services.ServiceLoader mServiceLoader -> i
    com.aviary.android.feather.effects.EffectLoaderService mEffectLoader -> j
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> k
    boolean mChanged -> l
    android.os.Handler mBackgroundHandler -> m
    int[] $SWITCH_TABLE$com$aviary$android$feather$FilterManager$STATE -> n
    void activateEffect(com.aviary.android.feather.library.content.EffectEntry) -> a
    void dispose() -> a
    android.content.Context getBaseContext() -> b
    android.graphics.Bitmap getBitmap() -> c
    boolean getBitmapChanged(android.graphics.Bitmap,android.graphics.Bitmap) -> a
    boolean getBitmapIsChanged() -> d
    com.aviary.android.feather.library.content.EffectEntry getCurrentEffect() -> e
    android.graphics.Matrix getCurrentImageViewMatrix() -> f
    boolean getEnabled() -> g
    java.lang.Object getService(java.lang.Class) -> a
    boolean isClosed() -> h
    boolean isOpened() -> q
    void onActivate(android.graphics.Bitmap) -> a
    void onApply() -> i
    boolean onBackPressed() -> j
    void onCancel() -> r
    void cancel() -> k
    void onClose(boolean) -> a
    void onComplete(android.graphics.Bitmap,java.util.HashMap) -> a
    void setNextBitmap(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void onError(java.lang.String) -> a
    void onPreviewChange(android.graphics.Bitmap) -> b
    void onPreviewChange(android.graphics.ColorFilter) -> a
    void onReady$a4d17b9() -> l
    void onReplaceImage(android.graphics.Bitmap) -> c
    void setCurrentState(com.aviary.android.feather.FilterManager$STATE) -> a
    void setEnabled$1385ff() -> m
    void setOnToolListener(com.aviary.android.feather.FilterManager$OnToolListener) -> a
    boolean onConfigurationChanged(android.content.res.Configuration) -> a
    void onPluginChanged(android.content.Intent) -> a
    void onProgressStart() -> n
    void onProgressEnd() -> o
    void setToolbarTitle(int) -> a
    void restoreToolbarTitle() -> p
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$0(com.aviary.android.feather.FilterManager) -> a
    void access$1(com.aviary.android.feather.FilterManager,com.aviary.android.feather.FilterManager$STATE) -> a
    com.aviary.android.feather.FilterManager$FeatherContext access$2(com.aviary.android.feather.FilterManager) -> b
    com.aviary.android.feather.effects.AbstractEffectPanel access$3(com.aviary.android.feather.FilterManager) -> c
    int[] $SWITCH_TABLE$com$aviary$android$feather$FilterManager$STATE() -> s
com.aviary.android.feather.FilterManager$1 -> com.aviary.android.feather.i:
    com.aviary.android.feather.FilterManager this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.FilterManager$2 -> com.aviary.android.feather.h:
    com.aviary.android.feather.FilterManager this$0 -> a
    void onOpened() -> a
    void onOpening() -> b
com.aviary.android.feather.FilterManager$3 -> com.aviary.android.feather.g:
    com.aviary.android.feather.FilterManager this$0 -> a
    boolean val$isConfirmed -> b
    void onClosed() -> b
    void onClosing() -> a
com.aviary.android.feather.FilterManager$4 -> com.aviary.android.feather.j:
    com.aviary.android.feather.FilterManager this$0 -> a
    void run() -> run
com.aviary.android.feather.FilterManager$FeatherContext -> com.aviary.android.feather.an:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase getMainImage() -> m
    com.aviary.android.feather.widget.BottombarViewFlipper getBottomBar() -> h
    android.view.ViewGroup getOptionsPanelContainer() -> g
    android.view.ViewGroup getDrawingImageContainer() -> i
    void showToolProgress() -> j
    void hideToolProgress() -> k
    com.aviary.android.feather.widget.ToolbarView getToolbar() -> f
com.aviary.android.feather.FilterManager$OnToolListener -> com.aviary.android.feather.l:
    void onToolCompleted() -> c
com.aviary.android.feather.FilterManager$STATE -> com.aviary.android.feather.ak:
    com.aviary.android.feather.FilterManager$STATE CLOSED_CANCEL -> a
    com.aviary.android.feather.FilterManager$STATE CLOSED_CONFIRMED -> b
    com.aviary.android.feather.FilterManager$STATE CLOSING -> c
    com.aviary.android.feather.FilterManager$STATE DISABLED -> d
    com.aviary.android.feather.FilterManager$STATE OPENED -> e
    com.aviary.android.feather.FilterManager$STATE OPENING -> f
    com.aviary.android.feather.FilterManager$STATE[] ENUM$VALUES -> g
    com.aviary.android.feather.FilterManager$STATE[] values() -> values
    com.aviary.android.feather.FilterManager$STATE valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.MonitoredActivity -> com.aviary.android.feather.MonitoredActivity:
    java.util.ArrayList mListeners -> a
    void addLifeCycleListener(com.aviary.android.feather.MonitoredActivity$LifeCycleListener) -> a
    void removeLifeCycleListener(com.aviary.android.feather.MonitoredActivity$LifeCycleListener) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    void onResume() -> onResume
com.aviary.android.feather.MonitoredActivity$LifeCycleAdapter -> com.aviary.android.feather.f:
    void onActivityDestroyed$467f814b() -> a
    void onActivityStarted$467f814b() -> b
    void onActivityStopped$467f814b() -> c
com.aviary.android.feather.MonitoredActivity$LifeCycleListener -> com.aviary.android.feather.ad:
    void onActivityDestroyed$467f814b() -> a
    void onActivityStarted$467f814b() -> b
    void onActivityStopped$467f814b() -> c
com.aviary.android.feather.R -> com.aviary.android.feather.e:
com.aviary.android.feather.R$anim -> com.aviary.android.feather.b:
    int feather_push_up_in -> a
    int feather_push_up_out -> b
com.aviary.android.feather.R$array -> com.aviary.android.feather.ap:
    int feather_brush_sizes -> a
    int feather_crop_names -> b
    int feather_crop_values -> c
    int feather_default_colors -> d
    int feather_text_fill_colors -> e
    int feather_text_stroke_colors -> f
com.aviary.android.feather.R$color -> com.aviary.android.feather.d:
    int feather_crop_adapter_background_normal -> a
    int feather_crop_adapter_background_selected -> b
    int feather_crop_adapter_border_normal -> c
    int feather_crop_adapter_border_selected -> d
    int feather_crop_highlight -> e
    int feather_crop_highlight_down -> f
    int feather_crop_highlight_outside -> g
    int feather_crop_highlight_outside_down -> h
    int feather_drawable_highlight_down -> i
    int feather_drawable_highlight_focus -> j
    int feather_sticker_highlight_outline -> k
    int feather_sticker_highlight_outline_down -> l
    int feather_sticker_highlight_stroke -> m
    int feather_sticker_highlight_stroke_down -> n
    int feather_text_highlight_stroke -> o
    int feather_text_highlight_stroke_down -> p
com.aviary.android.feather.R$drawable -> com.aviary.android.feather.c:
    int feather_crop_checkbox_selected -> a
    int feather_crop_checkbox_unselected -> b
    int feather_film_center -> c
    int feather_film_left -> d
    int feather_highlight_crop_handle -> e
    int feather_highlight_delete_button -> f
    int feather_overscroll_glow -> g
    int feather_sticker_pack_background -> h
    int feather_sticker_pack_background_more -> i
    int feather_sticker_paper_center_1 -> j
    int feather_sticker_paper_center_2 -> k
    int feather_sticker_paper_left_edge -> l
    int feather_sticker_tile_background -> m
    int feather_tool_icon_adjust -> n
    int feather_tool_icon_blemish -> o
    int feather_tool_icon_brightness -> p
    int feather_tool_icon_contrast -> q
    int feather_tool_icon_crop -> r
    int feather_tool_icon_draw -> s
    int feather_tool_icon_effects -> t
    int feather_tool_icon_enhance -> u
    int feather_tool_icon_meme -> v
    int feather_tool_icon_redeye -> w
    int feather_tool_icon_saturation -> x
    int feather_tool_icon_sharpen -> y
    int feather_tool_icon_stickers -> z
    int feather_tool_icon_text -> A
    int feather_tool_icon_whiten -> B
    int feather_toolbar_background -> C
    int icon -> D
    int spinner_white_16 -> E
com.aviary.android.feather.R$id -> com.aviary.android.feather.al:
    int aviary_com_link -> a
    int aviary_infoscreen_submit -> b
    int aviary_infoscreen_text -> c
    int aviary_logo -> d
    int background -> e
    int bottombar_view_flipper -> f
    int button1 -> g
    int button2 -> h
    int button3 -> i
    int button4 -> j
    int button_apply -> k
    int color_mask -> l
    int color_masked -> m
    int container -> n
    int crop_image_view -> o
    int disable_status -> p
    int drawing_view_container -> q
    int edit_cancel -> r
    int edit_premium -> s
    int edit_reset -> t
    int edit_save -> u
    int egg_info_view -> v
    int feather_meme_dumb -> w
    int flipper -> x
    int gallery -> y
    int gallery_color -> z
    int icon_big -> A
    int icon_small -> B
    int image -> C
    int image_loading_view -> D
    int invisible_text -> E
    int invisible_text_1 -> F
    int invisible_text_2 -> G
    int lens_button -> H
    int main_flipper -> I
    int overlay -> J
    int progress_text -> K
    int radio -> L
    int rubber -> M
    int selected -> N
    int size_preview_image -> O
    int switcher -> P
    int text -> Q
    int tool_image -> R
    int tool_text -> S
    int toolbar -> T
    int toolbar_content_panel -> U
    int toolbar_main_panel -> V
    int toolbar_title -> W
    int top_indicator_main -> X
    int top_indicator_panel -> Y
    int wheel -> Z
    int wheel_radio -> aa
    int workspace -> ab
    int workspace_container -> ac
    int workspace_indicator -> ad
com.aviary.android.feather.R$integer -> com.aviary.android.feather.k:
    int feather_adjust_tool_anim_time -> a
    int feather_adjust_tool_enable_3d_flip -> b
    int feather_adjust_tool_reset_anim_time -> c
    int feather_brush_softValue -> d
    int feather_config_bottom_animTime -> e
    int feather_config_infoscreen_animTime -> f
    int feather_config_mediumAnimTime -> g
    int feather_config_portraitRows -> h
    int feather_crop_allow_inverse -> i
    int feather_crop_highlight_internal_stroke_alpha -> j
    int feather_crop_highlight_internal_stroke_alpha_down -> k
    int feather_crop_highlight_internal_stroke_width -> l
    int feather_crop_highlight_stroke_width -> m
    int feather_crop_min_size -> n
    int feather_crop_selected_value -> o
    int feather_sticker_highlight_ellipse -> p
    int feather_sticker_highlight_minsize -> q
    int feather_sticker_highlight_padding -> r
    int feather_sticker_highlight_stroke_width -> s
    int feather_text_defaultSize -> t
    int feather_text_highlight_ellipse -> u
    int feather_text_highlight_stroke_width -> v
    int feather_text_minSize -> w
    int feather_text_padding -> x
    int feather_text_selected_color -> y
com.aviary.android.feather.R$layout -> com.aviary.android.feather.v:
    int feather_adjust_content -> a
    int feather_adjust_panel -> b
    int feather_checkbox_button -> c
    int feather_color_button -> d
    int feather_crop_button -> e
    int feather_crop_content -> f
    int feather_crop_panel -> g
    int feather_default_blank_gallery_item -> h
    int feather_drawing_content -> i
    int feather_drawing_panel -> j
    int feather_egg_info_view -> k
    int feather_egg_view -> l
    int feather_enhance_panel -> m
    int feather_filter_thumb -> n
    int feather_image_radiobutton -> o
    int feather_itoast_layout -> p
    int feather_loading_view -> q
    int feather_main -> r
    int feather_meme_content -> s
    int feather_meme_panel -> t
    int feather_native_effects_content -> u
    int feather_native_effects_panel -> v
    int feather_native_range_effects_content -> w
    int feather_pixelbrush_panel -> x
    int feather_spotdraw_content -> y
    int feather_sticker_pack -> z
    int feather_sticker_thumb -> A
    int feather_stickers_content -> B
    int feather_stickers_panel -> C
    int feather_text_content -> D
    int feather_text_panel -> E
    int feather_toolbar_title_text -> F
    int feather_wheel_panel -> G
    int feather_workspace_screen -> H
com.aviary.android.feather.R$menu -> com.aviary.android.feather.ag:
    int menu -> a
com.aviary.android.feather.R$string -> com.aviary.android.feather.ae:
    int adjust -> a
    int attention -> b
    int blemish -> c
    int brightness -> d
    int confirm_quit_message -> e
    int confirm_quit_title -> f
    int contrast -> g
    int crop -> h
    int draw -> i
    int effect_loading_message -> j
    int effects -> k
    int effet_loading_title -> l
    int enhance -> m
    int error_download_image_message -> n
    int feather_meme_default_font -> o
    int generic_error_title -> p
    int get_more -> q
    int keep_editing -> r
    int meme -> s
    int no -> t
    int ok -> u
    int red_eye -> v
    int revert_dialog_message -> w
    int revert_dialog_title -> x
    int saturation -> y
    int sharpen -> z
    int sticker_pack_updated_1 -> A
    int sticker_pack_updated_2 -> B
    int sticker_pack_updated_3 -> C
    int stickers -> D
    int text -> E
    int tool_leave_question -> F
    int whiten -> G
    int yes -> H
    int yes_leave -> I
    int zoom_mode -> J
com.aviary.android.feather.R$style -> com.aviary.android.feather.ai:
    int Animations_iToast -> a
com.aviary.android.feather.R$styleable -> com.aviary.android.feather.ac:
    int[] CellLayout -> a
    int[] ImageButtonRadioGroup -> b
    int[] ImageRadioButton -> c
    int[] ToolbarView -> d
    int[] Wheel -> e
    int[] WheelRadio -> f
    int[] Workspace -> g
    int[] WorkspaceIndicator -> h
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager -> com.aviary.android.feather.a.k:
    android.os.Handler purgeHandler -> a
    android.content.Context mContext -> b
    int mThumbSize -> c
    android.os.Handler mHandler -> d
    java.lang.Boolean mStopped -> e
    int nThreads -> f
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$PoolWorker[] threads -> g
    java.util.LinkedList mQueue -> h
    java.util.HashMap sHardBitmapCache -> i
    java.util.concurrent.ConcurrentHashMap sSoftBitmapCache -> j
    java.lang.Runnable mPurger -> k
    void setThumbSize(int) -> a
    void shutDownNow() -> a
    void loadAsset$38bf468c(android.content.res.Resources,java.lang.String,android.widget.ImageView) -> a
    android.graphics.Bitmap downloadBitmap(android.content.res.Resources,java.lang.String,android.graphics.drawable.Drawable,android.view.View) -> a
    void clearCache() -> b
    android.graphics.Bitmap getBitmapFromCache(java.lang.String) -> a
    java.util.concurrent.ConcurrentHashMap access$0() -> c
    java.lang.Boolean access$1(com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager) -> a
    java.util.LinkedList access$2(com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager) -> b
    android.os.Handler access$3(com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager) -> c
    android.graphics.Bitmap access$4(com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager,java.lang.String) -> a
    void access$5(com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager,java.lang.String,android.graphics.Bitmap) -> a
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$MyRunnable access$6(android.widget.ImageView) -> a
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$1 -> com.aviary.android.feather.a.g:
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager this$0 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$2 -> com.aviary.android.feather.a.f:
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager this$0 -> a
    void run() -> run
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$3 -> com.aviary.android.feather.a.e:
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager this$0 -> b
    java.lang.String val$srcFile -> c
    android.content.res.Resources val$resource -> d
    android.graphics.drawable.Drawable val$background -> e
    void run() -> run
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$CustomTag -> com.aviary.android.feather.a.i:
    java.lang.ref.WeakReference taskReference -> a
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$MyRunnable getDownloaderTask() -> a
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$MyRunnable -> com.aviary.android.feather.a.c:
    java.lang.ref.WeakReference view -> a
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager this$0 -> b
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$PoolWorker -> com.aviary.android.feather.a.a:
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager this$0 -> a
    void run() -> run
com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager$Thumb -> com.aviary.android.feather.a.j:
    android.graphics.Bitmap bitmap -> a
    android.widget.ImageView image -> b
com.aviary.android.feather.async_tasks.DownloadImageAsyncTask -> com.aviary.android.feather.a.h:
    com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener mListener -> a
    com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageSizeListener mSizeListener -> b
    android.net.Uri mUri -> c
    java.lang.String error -> d
    com.aviary.android.feather.library.utils.ImageLoader$ImageSizes mImageSize -> e
    void setOnLoadListener(com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener) -> a
    void setOnImageSizeListener(com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageSizeListener) -> a
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(android.content.Context[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener -> com.aviary.android.feather.a.d:
    void onDownloadStart() -> d
    void onDownloadComplete(android.graphics.Bitmap) -> a
    void onDownloadError(java.lang.String) -> a
com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageSizeListener -> com.aviary.android.feather.a.b:
    void onImageSize(java.lang.String,java.lang.String,java.lang.String) -> a
com.aviary.android.feather.effects.AbstractContentPanel -> com.aviary.android.feather.effects.ar:
    com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener mContentReadyListener -> l
    android.view.View mDrawingPanel -> m
    it.sephiroth.android.library.imagezoom.ImageViewTouch mImageView -> n
    void setOnReadyListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener) -> a
    android.view.View getContentView(android.view.LayoutInflater) -> a_
    android.view.View getContentView() -> v
    void onDispose() -> s
    void setEnabled(boolean) -> a
    void contentReady() -> w
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
com.aviary.android.feather.effects.AbstractEffectPanel -> com.aviary.android.feather.effects.d:
    android.os.Handler mListenerHandler -> a
    android.graphics.Bitmap mPreview -> e
    android.graphics.Bitmap mBitmap -> f
    boolean mActive -> b
    boolean mCreated -> c
    boolean mChanged -> d
    boolean mSaving -> l
    long mRenderTime -> m
    boolean mEnabled -> n
    com.aviary.android.feather.library.filters.IFilter mFilter -> g
    java.util.HashMap mTrackingAttributes -> h
    com.aviary.android.feather.effects.AbstractEffectPanel$OnProgressListener mProgressListener -> i
    com.aviary.android.feather.effects.AbstractEffectPanel$OnPreviewListener mListener -> j
    com.aviary.android.feather.effects.AbstractEffectPanel$OnApplyResultListener mApplyListener -> o
    com.aviary.android.feather.effects.AbstractEffectPanel$OnErrorListener mErrorListener -> p
    com.aviary.android.feather.library.services.EffectContext mFilterContext -> q
    com.aviary.android.feather.library.log.LoggerFactory$Logger mLogger -> k
    void onProgressStart() -> g
    void onProgressEnd() -> h
    void setEnabled(boolean) -> a
    boolean isEnabled() -> i
    boolean isActive() -> j
    boolean isCreated() -> k
    void setOnPreviewListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnPreviewListener) -> a
    void setOnApplyResultListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnApplyResultListener) -> a
    void setOnErrorListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnErrorListener) -> a
    void setOnProgressListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnProgressListener) -> a
    void onCreate(android.graphics.Bitmap) -> a
    void onOpening() -> l
    void onClosing() -> m
    boolean onBackPressed() -> n
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onSave() -> o
    boolean onCancel() -> p
    void onCancelled() -> q
    boolean getIsChanged() -> a
    void setIsChanged(boolean) -> b
    void onDestroy() -> d
    void onActivate() -> b
    void onDeactivate() -> c
    com.aviary.android.feather.library.services.EffectContext getContext() -> r
    void onDispose() -> s
    void recyclePreview() -> t
    void onPreviewChanged$12a34699(android.graphics.ColorFilter) -> a
    void onPreviewChanged(android.graphics.Bitmap,boolean) -> a
    void onComplete(android.graphics.Bitmap) -> b
    void onGenericError(java.lang.String) -> a
    void onGenericError(java.lang.Exception) -> a
    void onGenerateResult() -> e
com.aviary.android.feather.effects.AbstractEffectPanel$1 -> com.aviary.android.feather.effects.a:
    com.aviary.android.feather.effects.AbstractEffectPanel this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.effects.AbstractEffectPanel$ContentPanel -> com.aviary.android.feather.effects.aq:
    void setOnReadyListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener) -> a
    android.view.View getContentView(android.view.LayoutInflater) -> a_
    android.graphics.Matrix getContentDisplayMatrix() -> f
com.aviary.android.feather.effects.AbstractEffectPanel$OnApplyResultListener -> com.aviary.android.feather.effects.bf:
    void onComplete(android.graphics.Bitmap,java.util.HashMap) -> a
com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener -> com.aviary.android.feather.effects.bh:
    void onReady$a4d17b9() -> l
com.aviary.android.feather.effects.AbstractEffectPanel$OnErrorListener -> com.aviary.android.feather.effects.bp:
    void onError(java.lang.String) -> a
com.aviary.android.feather.effects.AbstractEffectPanel$OnPreviewListener -> com.aviary.android.feather.effects.m:
    void onPreviewChange(android.graphics.Bitmap) -> b
    void onPreviewChange(android.graphics.ColorFilter) -> a
com.aviary.android.feather.effects.AbstractEffectPanel$OnProgressListener -> com.aviary.android.feather.effects.y:
    void onProgressStart() -> n
    void onProgressEnd() -> o
com.aviary.android.feather.effects.AbstractEffectPanel$OptionPanel -> com.aviary.android.feather.effects.bd:
    android.view.View getOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
com.aviary.android.feather.effects.AbstractOptionPanel -> com.aviary.android.feather.effects.bc:
    android.view.View mOptionView -> o
    android.view.View getOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    android.view.View getOptionView() -> x
    void onDispose() -> s
    void setEnabled(boolean) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
com.aviary.android.feather.effects.AdjustEffectPanel -> com.aviary.android.feather.effects.am:
    com.aviary.android.feather.widget.AdjustImageView mView -> a
    int animDuration -> b
    int resetAnimDuration -> c
    boolean isClosing -> d
    boolean enable3DAnimation -> p
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onDeactivate() -> c
    void onDestroy() -> d
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    void onClick(android.view.View) -> onClick
    boolean getIsChanged() -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void onGenerateResult() -> e
    boolean onCancel() -> p
    void onResetComplete() -> u
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.ColorMatrixEffectPanel -> com.aviary.android.feather.effects.x:
    com.aviary.android.feather.widget.Wheel mWheel -> d
    com.aviary.android.feather.widget.WheelRadio mWheelRadio -> l
    java.lang.String mResourceName -> a
    int mLastValue -> b
    float mCurrentRealValue -> c
    float mMinValue -> m
    float mMaxValue -> n
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onDeactivate() -> c
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    void onScrollStarted$6f8b4406() -> a_
    void onApplyValue(float) -> a
    void onScroll$6f8b4406(float,int) -> a
    void onScrollFinished$6f8b4406(float,int) -> b
    void onGenerateResult() -> e
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.ColorMatrixEffectPanel$1 -> com.aviary.android.feather.effects.w:
    com.aviary.android.feather.effects.ColorMatrixEffectPanel this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.aviary.android.feather.effects.CropPanel -> com.aviary.android.feather.effects.av:
    com.aviary.android.feather.widget.Gallery mGallery -> a
    java.lang.String[] mCropNames -> d
    java.lang.String[] mCropValues -> p
    android.view.View mSelected -> q
    int mSelectedPosition -> b
    boolean mInverted -> c
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    double calculateAspectRatio(int,boolean) -> a
    void onDestroy() -> d
    void onDeactivate() -> c
    void setCustomRatio(double,boolean) -> a
    void updateSelection(android.view.View,int) -> a
    void onGenerateResult() -> e
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void onSingleTapUpConfirmed() -> u
    void setEnabled(boolean) -> a
    double access$1$150bd9eb(com.aviary.android.feather.effects.CropPanel,int) -> a
    void access$2(com.aviary.android.feather.effects.CropPanel,double,boolean) -> a
com.aviary.android.feather.effects.CropPanel$1 -> com.aviary.android.feather.effects.e:
    com.aviary.android.feather.effects.CropPanel this$0 -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
com.aviary.android.feather.effects.CropPanel$GalleryAdapter -> com.aviary.android.feather.effects.c:
    java.lang.String[] mStrings -> a
    android.view.LayoutInflater mLayoutInflater -> b
    android.content.res.Resources mRes -> c
    com.aviary.android.feather.effects.CropPanel this$0 -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.CropPanel$GenerateResultTask -> com.aviary.android.feather.effects.h:
    android.app.ProgressDialog mProgress -> a
    android.graphics.Rect mCropRect -> b
    com.aviary.android.feather.effects.CropPanel this$0 -> c
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(android.graphics.Bitmap[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.DrawingPanel -> com.aviary.android.feather.effects.bi:
    android.widget.ImageButton mLensButton -> q
    com.aviary.android.feather.widget.Gallery mGallerySize -> a
    com.aviary.android.feather.widget.Gallery mGalleryColor -> b
    android.view.View mSelectedSizeView -> r
    android.view.View mSelectedColorView -> s
    int mSelectedColorPosition -> c
    int mSelectedSizePosition -> d
    int[] mBrushSizes -> t
    int[] mBrushColors -> p
    int defaultOption -> u
    int mColor -> v
    int mSize -> w
    int mBlur -> x
    android.graphics.Paint mPaint -> y
    com.aviary.android.feather.services.ConfigService mConfig -> z
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool mSelectedTool -> A
    com.aviary.android.feather.widget.IToast mToast -> B
    com.aviary.android.feather.graphics.PreviewCircleDrawable mCircleDrawablePreview -> C
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$DrawingPanel$DrawinTool -> D
    void onCreate(android.graphics.Bitmap) -> a
    void initAdapter(com.aviary.android.feather.widget.Gallery,android.widget.BaseAdapter,int) -> a
    void onActivate() -> b
    void updateSelectedSize(android.view.View,int) -> a
    void updateSelectedColor(android.view.View,int) -> b
    void setSelectedTool(com.aviary.android.feather.effects.DrawingPanel$DrawinTool) -> a
    void onDeactivate() -> c
    void onDestroy() -> d
    void updatePaint() -> u
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    void onGenerateResult() -> e
    void onDrawStart() -> b_
    void setEnabled(boolean) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void access$2(com.aviary.android.feather.effects.DrawingPanel,com.aviary.android.feather.widget.Gallery,android.widget.BaseAdapter,int) -> a
    void access$3(com.aviary.android.feather.effects.DrawingPanel,int) -> a
    android.graphics.Paint access$4(com.aviary.android.feather.effects.DrawingPanel) -> a
    int access$5(com.aviary.android.feather.effects.DrawingPanel) -> b
    void access$6(com.aviary.android.feather.effects.DrawingPanel) -> c
    void access$7(com.aviary.android.feather.effects.DrawingPanel) -> d
    void access$8(com.aviary.android.feather.effects.DrawingPanel) -> e
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool access$9(com.aviary.android.feather.effects.DrawingPanel) -> f
    void access$10(com.aviary.android.feather.effects.DrawingPanel,com.aviary.android.feather.effects.DrawingPanel$DrawinTool) -> a
    void access$11(com.aviary.android.feather.effects.DrawingPanel,int,int,int,boolean) -> a
    int access$12(com.aviary.android.feather.effects.DrawingPanel) -> g
    void access$13(com.aviary.android.feather.effects.DrawingPanel,int) -> b
    int access$14(com.aviary.android.feather.effects.DrawingPanel) -> h
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$DrawingPanel$DrawinTool() -> y
com.aviary.android.feather.effects.DrawingPanel$1 -> com.aviary.android.feather.effects.r:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    com.aviary.android.feather.widget.Gallery val$gallery -> b
    android.widget.BaseAdapter val$adapter -> c
    int val$selectedPosition -> d
    void run() -> run
com.aviary.android.feather.effects.DrawingPanel$2 -> com.aviary.android.feather.effects.o:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
com.aviary.android.feather.effects.DrawingPanel$3 -> com.aviary.android.feather.effects.q:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
com.aviary.android.feather.effects.DrawingPanel$4 -> com.aviary.android.feather.effects.s:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.effects.DrawingPanel$DrawinTool -> com.aviary.android.feather.effects.be:
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Draw -> a
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Erase -> b
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Zoom -> c
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool[] ENUM$VALUES -> d
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool[] values() -> values
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.DrawingPanel$GalleryColorAdapter -> com.aviary.android.feather.effects.ap:
    int[] colors -> a
    android.view.LayoutInflater mLayoutInflater -> b
    android.content.res.Resources mRes -> c
    com.aviary.android.feather.effects.DrawingPanel this$0 -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.DrawingPanel$GallerySizeAdapter -> com.aviary.android.feather.effects.bb:
    int[] sizes -> a
    android.view.LayoutInflater mLayoutInflater -> b
    android.content.res.Resources mRes -> c
    int mBiggest -> d
    com.aviary.android.feather.effects.DrawingPanel this$0 -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.EffectLoaderService -> com.aviary.android.feather.effects.EffectLoaderService:
    com.aviary.android.feather.library.content.EffectEntry[] mAllEntries -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters -> b
    com.aviary.android.feather.effects.AbstractEffectPanel load(com.aviary.android.feather.library.content.EffectEntry) -> a
    com.aviary.android.feather.library.content.EffectEntry[] getEffects() -> b
    void dispose() -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters() -> d
com.aviary.android.feather.effects.EnhanceEffectPanel -> com.aviary.android.feather.effects.bq:
    com.aviary.android.feather.effects.EnhanceEffectPanel$RenderTask mCurrentTask -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters mFilterType -> c
    com.aviary.android.feather.library.filters.FilterService mFilterService -> d
    boolean mIsRendering -> a
    void onActivate() -> b
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    boolean onBackPressed() -> n
    void onCancelled() -> q
    boolean onCancel() -> p
    void killCurrentTask() -> f
    boolean getIsChanged() -> a
    void onCheckedChanged$3d81667e(int,boolean) -> a
    void onGenerateResult() -> e
    void setEnabled(boolean) -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters access$2(com.aviary.android.feather.effects.EnhanceEffectPanel) -> a
    void access$3$2108559c(com.aviary.android.feather.effects.EnhanceEffectPanel) -> b
com.aviary.android.feather.effects.EnhanceEffectPanel$GenerateResultTask -> com.aviary.android.feather.effects.aw:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.EnhanceEffectPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.EnhanceEffectPanel$RenderTask -> com.aviary.android.feather.effects.al:
    java.lang.String mError -> b
    com.aviary.android.feather.library.filters.EnhanceFilter renderFilter -> a
    com.aviary.android.feather.effects.EnhanceEffectPanel this$0 -> c
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(com.aviary.android.feather.library.filters.EnhanceFilter$Types[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onCancelled(java.lang.Object) -> onCancelled
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.MemePanel -> com.aviary.android.feather.effects.n:
    android.widget.Button editTopButton -> a
    android.widget.Button editBottomButton -> b
    android.widget.EditText editTopText -> c
    android.widget.EditText editBottomText -> d
    android.view.inputmethod.InputMethodManager mInputManager -> p
    android.graphics.Canvas mCanvas -> q
    com.aviary.android.feather.widget.DrawableHighlightView topHv -> r
    com.aviary.android.feather.widget.DrawableHighlightView bottomHv -> s
    android.graphics.Typeface mTypeface -> t
    java.lang.String fontName -> u
    com.aviary.android.feather.effects.MemePanel$MyTextWatcher mEditTextWatcher -> v
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onDeactivate() -> c
    void onDestroy() -> d
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    void onGenerateResult() -> e
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void flattenText(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    void onClick(android.view.View) -> onClick
    void onTopClick(com.aviary.android.feather.widget.DrawableHighlightView) -> d
    float[] getMatrixValues(android.graphics.Matrix) -> a
    void addEditable(com.aviary.android.feather.widget.DrawableHighlightView,android.graphics.Matrix,android.graphics.RectF) -> a
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void endEditView(com.aviary.android.feather.widget.DrawableHighlightView) -> e
    void beginEditView(com.aviary.android.feather.widget.DrawableHighlightView) -> f
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void setEnabled(boolean) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
com.aviary.android.feather.effects.MemePanel$1 -> com.aviary.android.feather.effects.bn:
    com.aviary.android.feather.effects.MemePanel this$0 -> b
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.aviary.android.feather.effects.MemePanel$2 -> com.aviary.android.feather.effects.bl:
    com.aviary.android.feather.effects.MemePanel this$0 -> a
    void onBitmapChanged$130e17e7() -> a
com.aviary.android.feather.effects.MemePanel$MyTextWatcher -> com.aviary.android.feather.effects.t:
    com.aviary.android.feather.widget.DrawableHighlightView view -> a
    com.aviary.android.feather.effects.MemePanel this$0 -> b
com.aviary.android.feather.effects.NativeEffectRangePanel -> com.aviary.android.feather.effects.j:
    com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener mContentReadyListener -> m
    android.view.View mDrawingPanel -> n
    it.sephiroth.android.library.imagezoom.ImageViewTouch mImageView -> a
    int mLastValue -> p
    com.aviary.android.feather.widget.IToast mToast -> q
    com.aviary.android.feather.effects.NativeEffectRangePanel$ApplyFilterTask mCurrentTask -> b
    boolean mIsRendering -> c
    boolean useToastForLoading -> r
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onDispose() -> s
    void onScrollStarted$6f8b4406() -> a_
    void onScroll$6f8b4406(float,int) -> a
    void onScrollFinished$6f8b4406(float,int) -> b
    void onProgressEnd() -> h
    void onProgressStart() -> g
    void onDestroy() -> d
    void onDeactivate() -> c
    void onGenerateResult() -> e
    boolean onBackPressed() -> n
    void onCancelled() -> q
    boolean getIsChanged() -> a
    boolean killCurrentTask() -> u
    void setOnReadyListener(com.aviary.android.feather.effects.AbstractEffectPanel$OnContentReadyListener) -> a
    android.view.View getContentView(android.view.LayoutInflater) -> a_
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.NativeEffectRangePanel$ApplyFilterTask -> com.aviary.android.feather.effects.ax:
    com.aviary.android.feather.library.moa.MoaResult mResult -> a
    com.aviary.android.feather.effects.NativeEffectRangePanel this$0 -> b
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(android.graphics.Bitmap[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onCancelled(java.lang.Object) -> onCancelled
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.NativeEffectRangePanel$GenerateResultTask -> com.aviary.android.feather.effects.v:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.NativeEffectRangePanel this$0 -> b
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.NativeEffectsPanel -> com.aviary.android.feather.effects.ae:
    com.aviary.android.feather.effects.NativeEffectsPanel$RenderTask mCurrentTask -> a
    int mSelectedIndex -> b
    android.view.View mSelectedView -> c
    java.lang.Boolean mIsRendering -> d
    android.graphics.Bitmap mSmallPreview -> p
    boolean enableFastPreview -> q
    boolean useToastForLoading -> r
    com.aviary.android.feather.library.utils.ResourceManager mResourceManager -> s
    com.aviary.android.feather.library.services.PluginService mPluginService -> t
    com.aviary.android.feather.widget.HorizontialFixedListView mHList -> u
    com.aviary.android.feather.widget.IToast mToast -> v
    com.aviary.android.feather.widget.ImageSwitcher mImageSwitcher -> w
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onProgressEnd() -> h
    void onProgressStart() -> g
    void onGenerateResult() -> e
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    android.view.View makeView() -> makeView
    void onDestroy() -> d
    void onDeactivate() -> c
    android.graphics.Matrix getContentDisplayMatrix() -> f
    boolean onBackPressed() -> n
    void onCancelled() -> q
    boolean getIsChanged() -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    boolean killCurrentTask() -> u
    void setSelected(android.view.View,int) -> a
    void setEnabled(boolean) -> a
    com.aviary.android.feather.widget.HorizontialFixedListView access$2(com.aviary.android.feather.effects.NativeEffectsPanel) -> a
    boolean access$3(com.aviary.android.feather.effects.NativeEffectsPanel) -> b
    android.graphics.Bitmap access$4(com.aviary.android.feather.effects.NativeEffectsPanel) -> c
    void access$5(com.aviary.android.feather.effects.NativeEffectsPanel,java.lang.Boolean) -> a
    com.aviary.android.feather.widget.ImageSwitcher access$6(com.aviary.android.feather.effects.NativeEffectsPanel) -> d
    void access$7$156c31c(com.aviary.android.feather.effects.NativeEffectsPanel) -> e
    java.lang.Boolean access$8(com.aviary.android.feather.effects.NativeEffectsPanel) -> f
    com.aviary.android.feather.library.utils.ResourceManager access$9(com.aviary.android.feather.effects.NativeEffectsPanel) -> g
    int access$10(com.aviary.android.feather.effects.NativeEffectsPanel) -> h
    android.view.View access$11(com.aviary.android.feather.effects.NativeEffectsPanel) -> i
    void access$12(com.aviary.android.feather.effects.NativeEffectsPanel,android.view.View) -> a
com.aviary.android.feather.effects.NativeEffectsPanel$FiltersAdapter -> com.aviary.android.feather.effects.bg:
    android.view.LayoutInflater mLayoutInflater -> a
    int mFilterResourceId -> b
    int mCellWidth -> c
    com.aviary.android.feather.effects.NativeEffectsPanel this$0 -> d
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.NativeEffectsPanel$GenerateResultTask -> com.aviary.android.feather.effects.u:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.NativeEffectsPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.NativeEffectsPanel$LoadFiltersRunner -> com.aviary.android.feather.effects.g:
    java.lang.String[] mlist -> b
    com.aviary.android.feather.effects.NativeEffectsPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.NativeEffectsPanel$LoadFiltersRunner$1 -> com.aviary.android.feather.effects.i:
    com.aviary.android.feather.effects.NativeEffectsPanel$LoadFiltersRunner this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.aviary.android.feather.effects.NativeEffectsPanel$RenderTask -> com.aviary.android.feather.effects.ao:
    java.lang.String mError -> a
    java.lang.String mEffect -> b
    android.app.ProgressDialog mProgress -> c
    com.aviary.android.feather.library.moa.MoaResult mNativeResult -> d
    com.aviary.android.feather.library.moa.MoaResult mSmallNativeResult -> e
    com.aviary.android.feather.effects.NativeEffectsPanel this$0 -> f
    void onPreExecute() -> b
    android.graphics.Bitmap doInBackground$2d4c763b() -> g
    void onCancelled() -> c
    void onCancel(android.content.DialogInterface) -> onCancel
    void onPostExecute(java.lang.Object) -> a
    java.lang.Object doInBackground$42af7916() -> a
    void onProgressUpdate(java.lang.Object[]) -> a
com.aviary.android.feather.effects.NativeEffectsPanel$ViewHolder -> com.aviary.android.feather.effects.bm:
    android.view.View selected -> a
    android.widget.ImageView image -> b
    android.widget.TextView text -> c
    android.view.View container -> d
    com.aviary.android.feather.effects.NativeEffectsPanel this$0 -> e
com.aviary.android.feather.effects.SpotDrawPanel -> com.aviary.android.feather.effects.bo:
    com.aviary.android.feather.widget.ImageViewSpotDraw mImageView -> a
    int defaultOption -> q
    int mBrushSize -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters mFilterType -> r
    com.aviary.android.feather.widget.Gallery mGallery -> c
    int[] mBrushSizes -> d
    android.view.View mSelected -> s
    int mSelectedPosition -> p
    android.widget.ImageButton mLensButton -> t
    com.aviary.android.feather.effects.SpotDrawPanel$MyHandlerThread mBackgroundDrawThread -> u
    com.aviary.android.feather.widget.IToast mToast -> v
    com.aviary.android.feather.graphics.PreviewCircleDrawable mCircleDrawablePreview -> w
    void updateSizePreview(int) -> a
    void onCreate(android.graphics.Bitmap) -> a
    void initAdapter() -> u
    void onActivate() -> b
    void onDispose() -> s
    void updateSelection(android.view.View,int) -> a
    void onDeactivate() -> c
    void onDestroy() -> d
    void onCancelled() -> q
    void onDrawStart(float[],int) -> a
    void onDrawing$49651d03(float[]) -> a
    void onDrawEnd() -> d_
    void onGenerateResult() -> e
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void setEnabled(boolean) -> a
    com.aviary.android.feather.effects.SpotDrawPanel$MyHandlerThread access$1(com.aviary.android.feather.effects.SpotDrawPanel) -> a
    void access$2(com.aviary.android.feather.effects.SpotDrawPanel,com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode) -> a
    void access$3(com.aviary.android.feather.effects.SpotDrawPanel) -> b
    void access$4(com.aviary.android.feather.effects.SpotDrawPanel,int) -> a
    void access$5(com.aviary.android.feather.effects.SpotDrawPanel,int) -> b
    void access$6(com.aviary.android.feather.effects.SpotDrawPanel) -> c
com.aviary.android.feather.effects.SpotDrawPanel$1 -> com.aviary.android.feather.effects.ay:
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
com.aviary.android.feather.effects.SpotDrawPanel$2 -> com.aviary.android.feather.effects.az:
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.SpotDrawPanel$3 -> com.aviary.android.feather.effects.ba:
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.effects.SpotDrawPanel$GalleryAdapter -> com.aviary.android.feather.effects.bk:
    int[] sizes -> a
    android.view.LayoutInflater mLayoutInflater -> b
    android.graphics.drawable.Drawable checkbox_unselected -> c
    android.graphics.drawable.Drawable checkbox_selected -> d
    android.content.res.Resources mRes -> e
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> f
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.SpotDrawPanel$GenerateResultTask -> com.aviary.android.feather.effects.as:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground$10299ca() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.SpotDrawPanel$MyHandlerThread -> com.aviary.android.feather.effects.f:
    boolean started -> d
    boolean running -> e
    boolean paused -> f
    float mX -> a
    float mY -> b
    com.aviary.android.feather.library.graphics.FlattenPath mFlattenPath -> c
    int mRadius -> g
    android.graphics.PointF mLastPoint -> h
    com.aviary.android.feather.effects.SpotDrawPanel this$0 -> i
    void start() -> start
    void quit() -> a
    void setRadius(int) -> a
    boolean isCompleted() -> b
    void run() -> run
com.aviary.android.feather.effects.StickersPanel -> com.aviary.android.feather.effects.bj:
    android.graphics.drawable.Drawable mFolderIcon -> a
    android.graphics.drawable.Drawable mGetMoreIcon -> b
    int mStickerHvEllipse -> c
    int mStickerHvStrokeWidth -> d
    int mStickerHvStrokeColor -> p
    int mStickerHvStrokeColorDown -> q
    int mStickerHvMinSize -> r
    int mStickerHvPadding -> s
    int mStickerHvColor -> t
    int mStickerHvColorDown -> u
    com.aviary.android.feather.widget.wp.Workspace mWorkspace -> v
    com.aviary.android.feather.widget.wp.WorkspaceIndicator mWorkspaceIndicator -> w
    com.aviary.android.feather.widget.HorizontialFixedListView mHList -> x
    android.widget.ViewFlipper mViewFlipper -> y
    int mStickerMinSize -> z
    android.graphics.Canvas mCanvas -> A
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager mDownloadManager -> B
    com.aviary.android.feather.library.services.PluginService mPluginService -> C
    int mWorkspaceCols -> D
    int mWorkspaceRows -> E
    int mWorkspaceItemsPerPage -> F
    java.util.List mUsedStickers -> G
    java.util.List mUsedStickersPacks -> H
    java.util.HashSet mRegisteredPackages -> I
    com.aviary.android.feather.library.utils.ResourceManager mResourceManager -> J
    com.aviary.android.feather.services.ConfigService mConfig -> K
    com.aviary.android.feather.effects.StickersPanel$Status mStatus -> L
    com.aviary.android.feather.effects.StickersPanel$Status mPrevStatus -> M
    android.os.Handler mHandler -> N
    boolean isAnimating -> O
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$StickersPanel$Status -> P
    void onCreate(android.graphics.Bitmap) -> a
    void onOpening() -> l
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onDeactivate() -> c
    void onActivate() -> b
    void onDestroy() -> d
    void onGenerateResult() -> e
    boolean onBackPressed() -> n
    boolean onCancel() -> p
    void loadPacks() -> u
    void loadStickers() -> y
    void initWorkspace() -> z
    void onApplyCurrent$1385ff() -> A
    void onClearCurrent(boolean,boolean) -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    void onComplete(android.graphics.Bitmap) -> b
    java.lang.StringBuilder getUsedPacksNames() -> B
    void onUpdate() -> c_
    void askToLeaveWithoutApply() -> C
    void setStatus(com.aviary.android.feather.effects.StickersPanel$Status) -> a
    boolean stickersOnScreen() -> D
    void setEnabled(boolean) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    com.aviary.android.feather.widget.HorizontialFixedListView access$2(com.aviary.android.feather.effects.StickersPanel) -> a
    void access$3(com.aviary.android.feather.effects.StickersPanel,java.lang.String) -> a
    int access$4(com.aviary.android.feather.effects.StickersPanel) -> b
    com.aviary.android.feather.widget.wp.Workspace access$5(com.aviary.android.feather.effects.StickersPanel) -> c
    int access$6(com.aviary.android.feather.effects.StickersPanel) -> d
    android.graphics.drawable.Drawable access$7(com.aviary.android.feather.effects.StickersPanel) -> e
    com.aviary.android.feather.library.services.PluginService access$8(com.aviary.android.feather.effects.StickersPanel) -> f
    android.graphics.drawable.Drawable access$9(com.aviary.android.feather.effects.StickersPanel) -> g
    void access$10(com.aviary.android.feather.effects.StickersPanel,android.content.pm.ApplicationInfo) -> a
    com.aviary.android.feather.async_tasks.AssetsAsyncDownloadManager access$11(com.aviary.android.feather.effects.StickersPanel) -> h
    com.aviary.android.feather.library.utils.ResourceManager access$12(com.aviary.android.feather.effects.StickersPanel) -> i
    void access$13$df16e68(com.aviary.android.feather.effects.StickersPanel) -> j
    void access$14$4fc4543c(com.aviary.android.feather.effects.StickersPanel,boolean) -> a
    void access$15(com.aviary.android.feather.effects.StickersPanel) -> k
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$StickersPanel$Status() -> E
com.aviary.android.feather.effects.StickersPanel$1 -> com.aviary.android.feather.effects.aj:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.effects.StickersPanel$4 -> com.aviary.android.feather.effects.ah:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onDeleteClick() -> a
com.aviary.android.feather.effects.StickersPanel$5 -> com.aviary.android.feather.effects.ag:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$6 -> com.aviary.android.feather.effects.af:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$7 -> com.aviary.android.feather.effects.ad:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$8 -> com.aviary.android.feather.effects.ac:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$9 -> com.aviary.android.feather.effects.ab:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner -> com.aviary.android.feather.effects.an:
    java.lang.String[] mlist -> b
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner$1 -> com.aviary.android.feather.effects.z:
    com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.aviary.android.feather.effects.StickersPanel$Status -> com.aviary.android.feather.effects.aa:
    com.aviary.android.feather.effects.StickersPanel$Status Null -> a
    com.aviary.android.feather.effects.StickersPanel$Status Packs -> b
    com.aviary.android.feather.effects.StickersPanel$Status Stickers -> c
    com.aviary.android.feather.effects.StickersPanel$Status Sticker -> d
    com.aviary.android.feather.effects.StickersPanel$Status[] ENUM$VALUES -> e
    com.aviary.android.feather.effects.StickersPanel$Status[] values() -> values
    com.aviary.android.feather.effects.StickersPanel$Status valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.StickersPanel$StickersAdapter -> com.aviary.android.feather.effects.at:
    android.view.LayoutInflater mLayoutInflater -> a
    int mStickerResourceId -> b
    int mFinalSize -> c
    int mContainerHeight -> d
    com.aviary.android.feather.effects.StickersPanel this$0 -> e
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.StickersPanel$StickersPacksAdapter -> com.aviary.android.feather.effects.ai:
    int screenId -> b
    int cellId -> c
    android.view.LayoutInflater mLayoutInflater -> d
    long mCurrentDate -> e
    boolean mInFirstLayout -> f
    java.lang.String mGetMoreLabel -> g
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    int getCount() -> getCount
    android.content.pm.ApplicationInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.aviary.android.feather.effects.StickersPanel$StickersPacksAdapter$1 -> com.aviary.android.feather.effects.au:
    com.aviary.android.feather.effects.StickersPanel$StickersPacksAdapter this$1 -> a
    android.content.pm.ApplicationInfo val$appInfo -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.effects.TextPanel -> com.aviary.android.feather.effects.b:
    com.aviary.android.feather.widget.Gallery mGallery -> a
    android.view.View mSelected -> p
    int mSelectedPosition -> b
    int[] mColors -> c
    int[] mStrokeColors -> d
    int mColor -> q
    int mStrokeColor -> r
    int minTextSize -> s
    int defaultTextSize -> t
    int textPadding -> u
    android.graphics.Canvas mCanvas -> v
    android.view.inputmethod.InputMethodManager mInputManager -> w
    android.widget.EditText mEditText -> x
    com.aviary.android.feather.services.ConfigService config -> y
    int mHighlightEllipse -> z
    int mHighlightStrokeWidth -> A
    int mHighlightStrokeColor -> B
    int mHighlightStrokeColorDown -> C
    com.aviary.android.feather.effects.TextPanel$MyTextWatcher mEditTextWatcher -> D
    void endEdit$38c8709d() -> u
    android.view.View generateContentView(android.view.LayoutInflater) -> a
    android.view.View generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    boolean getIsChanged() -> a
    void onApplyCurrent(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void onCreate(android.graphics.Bitmap) -> a
    void onActivate() -> b
    void onDeactivate() -> c
    void onDestroy() -> d
    void updateSelection(android.view.View,int) -> a
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void onGenerateResult() -> e
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void setEnabled(boolean) -> a
    android.graphics.Matrix getContentDisplayMatrix() -> f
    void access$3(com.aviary.android.feather.effects.TextPanel,int) -> a
    void access$4(com.aviary.android.feather.effects.TextPanel,int) -> b
    void access$5(com.aviary.android.feather.effects.TextPanel) -> a
com.aviary.android.feather.effects.TextPanel$1 -> com.aviary.android.feather.effects.k:
    com.aviary.android.feather.effects.TextPanel this$0 -> b
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.aviary.android.feather.effects.TextPanel$2 -> com.aviary.android.feather.effects.l:
    com.aviary.android.feather.effects.TextPanel this$0 -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
com.aviary.android.feather.effects.TextPanel$GalleryAdapter -> com.aviary.android.feather.effects.ak:
    int[] colors -> a
    android.content.res.Resources mRes -> b
    android.view.LayoutInflater mLayoutInflater -> c
    com.aviary.android.feather.effects.TextPanel this$0 -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.TextPanel$MyTextWatcher -> com.aviary.android.feather.effects.p:
    com.aviary.android.feather.widget.DrawableHighlightView view -> a
    com.aviary.android.feather.effects.TextPanel this$0 -> b
com.aviary.android.feather.graphics.AnimatedRotateDrawable -> com.aviary.android.feather.b.e:
    com.aviary.android.feather.graphics.AnimatedRotateDrawable$AnimatedRotateState mState -> a
    boolean mMutated -> b
    float mCurrentDegrees -> c
    float mIncrement -> d
    boolean mRunning -> e
    void init() -> a
    void draw(android.graphics.Canvas) -> draw
    void start() -> start
    void stop() -> stop
    boolean isRunning() -> isRunning
    void nextFrame() -> b
    void run() -> run
    boolean setVisible(boolean,boolean) -> setVisible
    int getChangingConfigurations() -> getChangingConfigurations
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
    boolean getPadding(android.graphics.Rect) -> getPadding
    boolean isStateful() -> isStateful
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    android.graphics.drawable.Drawable$ConstantState getConstantState() -> getConstantState
    void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet) -> inflate
    android.graphics.drawable.Drawable mutate() -> mutate
com.aviary.android.feather.graphics.AnimatedRotateDrawable$AnimatedRotateState -> com.aviary.android.feather.b.g:
    android.graphics.drawable.Drawable mDrawable -> a
    int mChangingConfigurations -> b
    boolean mPivotXRel -> c
    float mPivotX -> d
    boolean mPivotYRel -> e
    float mPivotY -> f
    int mFrameDuration -> g
    int mFramesCount -> h
    boolean mCanConstantState -> i
    boolean mCheckedConstantState -> j
    android.graphics.drawable.Drawable newDrawable() -> newDrawable
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources) -> newDrawable
    int getChangingConfigurations() -> getChangingConfigurations
    boolean canConstantState() -> a
com.aviary.android.feather.graphics.CropCheckboxDrawable -> com.aviary.android.feather.b.c:
    android.graphics.drawable.Drawable mCropDrawable -> a
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.DefaultGalleryCheckboxDrawable -> com.aviary.android.feather.b.b:
    android.graphics.Paint mPaint -> a
    android.graphics.Rect mRect -> b
    int backgroundColor -> c
    int borderColor -> d
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.GalleryCircleDrawable -> com.aviary.android.feather.b.d:
    android.graphics.Paint mPaint -> a
    android.graphics.Paint mShadowPaint -> b
    int mShadowOffset -> c
    float mStrokeWidth -> d
    float mRadius -> e
    float mOriginalRadius -> f
    float centerX -> g
    float centerY -> h
    void update$2549578(float) -> a
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void invalidateSelf() -> invalidateSelf
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.LinearGradientDrawable -> com.aviary.android.feather.b.i:
    android.graphics.Paint mFillPaint -> a
    android.graphics.Rect mPadding -> b
    float mCornerRadius -> c
    boolean mRectIsDirty -> d
    int mAlpha -> e
    boolean mDither -> f
    android.graphics.ColorFilter mColorFilter -> g
    android.graphics.drawable.GradientDrawable$Orientation mOrientation -> h
    int[] mColors -> i
    float[] mPositions -> j
    android.graphics.RectF mRect -> k
    int[] $SWITCH_TABLE$android$graphics$drawable$GradientDrawable$Orientation -> l
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setDither(boolean) -> setDither
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean getPadding(android.graphics.Rect) -> getPadding
    int[] $SWITCH_TABLE$android$graphics$drawable$GradientDrawable$Orientation() -> a
com.aviary.android.feather.graphics.OverlayGalleryCheckboxDrawable -> com.aviary.android.feather.b.h:
    android.graphics.drawable.Drawable mOverlayDrawable -> a
    float mBottomOffset -> b
    int mPadding -> c
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void draw(android.graphics.Canvas) -> draw
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
com.aviary.android.feather.graphics.PreviewCircleDrawable -> com.aviary.android.feather.b.f:
    android.graphics.Paint mPaint -> a
    float mRadius -> b
    void setStyle(android.graphics.Paint$Style) -> a
    void setRadius(float) -> a
    void setColor(int) -> a
    void setBlur(int) -> b
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.RepeatableHorizontalDrawable -> com.aviary.android.feather.b.k:
    android.graphics.Paint mPaint -> a
    android.graphics.Rect mRect -> b
    android.graphics.Matrix mMatrix -> c
    android.graphics.Shader mShader -> d
    android.graphics.Bitmap mBitmap -> e
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.StickerBitmapDrawable -> com.aviary.android.feather.b.a:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    android.graphics.Paint mShadowPaint -> c
    android.graphics.Rect srcRect -> d
    android.graphics.Rect dstRect -> e
    android.graphics.ColorFilter blackColorFilter -> f
    android.graphics.ColorFilter whiteColorFilter -> g
    int mInset -> h
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    android.graphics.Bitmap getBitmap() -> a
com.aviary.android.feather.graphics.ToolIconsDrawable -> com.aviary.android.feather.b.j:
    android.graphics.drawable.Drawable mDrawable -> a
    android.graphics.ColorMatrixColorFilter whiteColorFilter -> b
    boolean mPressed -> c
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getIntrinsicWidth() -> getIntrinsicWidth
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean onStateChange(int[]) -> onStateChange
com.aviary.android.feather.library.content.EffectEntry -> com.aviary.android.feather.library.content.a:
    int labelResourceId -> a
    int iconResourceId -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters name -> c
com.aviary.android.feather.library.content.FeatherIntent -> com.aviary.android.feather.library.content.FeatherIntent:
com.aviary.android.feather.library.filters.AbstractColorMatrixFilter -> com.aviary.android.feather.library.filters.b:
    float[] mArray -> b
    android.graphics.ColorMatrixColorFilter apply(float) -> a
    float getMinValue() -> a
    float getMaxValue() -> b
    float[] getArray$2542356() -> c
    void getArray(float,float[]) -> a
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,float) -> a
com.aviary.android.feather.library.filters.AdjustFilter -> com.aviary.android.feather.library.filters.t:
    void setRotation(int) -> a
    void setFlip(boolean,boolean) -> a
com.aviary.android.feather.library.filters.BlurFilter -> com.aviary.android.feather.library.filters.p:
com.aviary.android.feather.library.filters.BrightnessFilter -> com.aviary.android.feather.library.filters.r:
    float getMinValue() -> a
    float getMaxValue() -> b
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,float) -> a
    float[] getArray$2542356() -> c
    void getArray(float,float[]) -> a
com.aviary.android.feather.library.filters.ContrastFilter -> com.aviary.android.feather.library.filters.n:
    float getMinValue() -> a
    float getMaxValue() -> b
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,float) -> a
    float[] getArray$2542356() -> c
    void getArray(float,float[]) -> a
com.aviary.android.feather.library.filters.EnhanceFilter -> com.aviary.android.feather.library.filters.q:
    com.aviary.android.feather.library.filters.EnhanceFilter$Types mType -> a
    com.aviary.android.feather.library.moa.MoaResult mResult -> b
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$EnhanceFilter$Types -> c
    void setType(com.aviary.android.feather.library.filters.EnhanceFilter$Types) -> a
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
    com.aviary.android.feather.library.moa.MoaActionList getActions() -> d
    boolean stop() -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$EnhanceFilter$Types() -> b
com.aviary.android.feather.library.filters.EnhanceFilter$Types -> com.aviary.android.feather.library.filters.k:
    com.aviary.android.feather.library.filters.EnhanceFilter$Types ENHANCE -> a
    com.aviary.android.feather.library.filters.EnhanceFilter$Types BACKLIGHT -> b
    com.aviary.android.feather.library.filters.EnhanceFilter$Types NIGHTENHANCE -> c
    com.aviary.android.feather.library.filters.EnhanceFilter$Types LABCORRECT -> d
    com.aviary.android.feather.library.filters.EnhanceFilter$Types[] ENUM$VALUES -> e
    com.aviary.android.feather.library.filters.EnhanceFilter$Types[] values() -> values
    com.aviary.android.feather.library.filters.EnhanceFilter$Types valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.filters.FilterLoaderFactory -> com.aviary.android.feather.library.filters.m:
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters() -> a
com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters -> com.aviary.android.feather.library.filters.o:
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters SHARPNESS -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters BRIGHTNESS -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters CONTRAST -> c
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters SATURATION -> d
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters EFFECTS -> e
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters RED_EYE -> f
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters CROP -> g
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters WHITEN -> h
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters DRAWING -> i
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters STICKERS -> j
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters TEXT -> k
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters BLEMISH -> l
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters MEME -> m
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters ADJUST -> n
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters ENHANCE -> o
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters[] ENUM$VALUES -> p
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters[] values() -> values
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.filters.FilterService -> com.aviary.android.feather.library.filters.FilterService:
    com.aviary.android.feather.library.filters.IFilter load(com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters) -> a
    com.aviary.android.feather.library.filters.INativeFiler load(java.lang.String) -> a
    void dispose() -> a
com.aviary.android.feather.library.filters.IFilter -> com.aviary.android.feather.library.filters.g:
com.aviary.android.feather.library.filters.ILevelFilter -> com.aviary.android.feather.library.filters.h:
com.aviary.android.feather.library.filters.INativeFiler -> com.aviary.android.feather.library.filters.f:
    com.aviary.android.feather.library.moa.MoaActionList getActions() -> d
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
com.aviary.android.feather.library.filters.INativeRangeFilter -> com.aviary.android.feather.library.filters.a:
    void setValue(java.lang.Float) -> a
com.aviary.android.feather.library.filters.NativeFilter -> com.aviary.android.feather.library.filters.e:
    com.aviary.android.feather.library.moa.MoaActionList mActions -> a
    com.aviary.android.feather.library.moa.MoaResult mResult -> b
    com.aviary.android.feather.library.moa.MoaActionList getActions() -> d
    void executeInPlace(android.graphics.Bitmap) -> a
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
    boolean stop() -> e
com.aviary.android.feather.library.filters.NativeFilterProxy -> com.aviary.android.feather.library.filters.d:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    void init(java.lang.String) -> a
    com.aviary.android.feather.library.moa.MoaResult prepareActions(com.aviary.android.feather.library.moa.MoaActionList,android.graphics.Bitmap) -> a
    com.aviary.android.feather.library.moa.MoaResult prepareActions(com.aviary.android.feather.library.moa.MoaActionList,android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
com.aviary.android.feather.library.filters.NativeRangeFilter -> com.aviary.android.feather.library.filters.c:
    java.lang.String mKey -> b
    com.aviary.android.feather.library.moa.MoaFloatParameter defaultParam -> c
    void setValue(java.lang.Float) -> a
com.aviary.android.feather.library.filters.PixelBrushFilter -> com.aviary.android.feather.library.filters.i:
    com.aviary.android.feather.library.moa.MoaPointParameter center -> b
    java.lang.String OPTION_CENTER -> c
    java.lang.String OPTION_RADIUS -> d
    void setRadius(float) -> a
    void draw(float,float,android.graphics.Bitmap) -> a
com.aviary.android.feather.library.filters.SaturationFilter -> com.aviary.android.feather.library.filters.l:
    float[] getArray$2542356() -> c
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,float) -> a
    void getArray(float,float[]) -> a
com.aviary.android.feather.library.filters.SharpenFilter -> com.aviary.android.feather.library.filters.s:
com.aviary.android.feather.library.filters.SharpnessFilter -> com.aviary.android.feather.library.filters.j:
    com.aviary.android.feather.library.filters.BlurFilter mBlur -> a
    com.aviary.android.feather.library.filters.SharpenFilter mSharpen -> b
    com.aviary.android.feather.library.filters.INativeRangeFilter mCurrent -> c
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
    void setValue(java.lang.Float) -> a
    com.aviary.android.feather.library.moa.MoaActionList getActions() -> d
com.aviary.android.feather.library.graphics.CubicCurve -> com.aviary.android.feather.library.c.c:
    double _x0 -> a
    double _y0 -> b
    double _x1 -> c
    double _y1 -> d
    double _x2 -> e
    double _y2 -> f
    double _x3 -> g
    double _y3 -> h
    void update(double,double,double,double,double,double,double,double) -> a
    android.graphics.PointF getB() -> a
    double getSquareFlatness() -> b
    double[] subdivide() -> c
com.aviary.android.feather.library.graphics.FlattenPath -> com.aviary.android.feather.library.c.a:
    double DEFAULT_FLATNESS -> a
    double MIN_CHORD_LENGTH_SQ -> b
    double MAX_CHORD_LENGTH_SQ -> c
    double flatness -> d
    java.util.LinkedList points -> e
    android.graphics.PointF lastPoint -> f
    com.aviary.android.feather.library.graphics.CubicCurve cubic -> g
    android.graphics.PointF remove() -> a
    int size() -> b
    void moveTo(float,float) -> a
    void lineTo(float,float) -> b
    void quadTo(float,float,float,float) -> a
    void flattenCubicPoints(double,double,double,double,double,double,double,double) -> a
com.aviary.android.feather.library.graphics.Point2D -> com.aviary.android.feather.library.c.b:
    double angleBetweenPoints(float[],float[]) -> a
    double distance(float[],float[]) -> b
com.aviary.android.feather.library.graphics.drawable.EditableDrawable -> com.aviary.android.feather.library.c.a.a:
    void beginEdit() -> a
    void endEdit() -> b
    boolean isEditing() -> c
    java.lang.CharSequence getText() -> d
    void setText(java.lang.CharSequence) -> a
    void setText(java.lang.String) -> a
    void setBounds(float,float,float,float) -> a
    void setTextColor(int) -> a
    int getTextColor() -> e
    void setTextStrokeColor(int) -> b
    int getTextStrokeColor() -> f
com.aviary.android.feather.library.graphics.drawable.FakeBitmapDrawable -> com.aviary.android.feather.library.c.a.c:
    int mFakeWidth -> b
    int mFakeHeight -> c
    int mRealWidth -> d
    int mRealHeight -> e
    android.graphics.Matrix mMatrix -> f
    android.graphics.Paint mPaint -> g
    void draw(android.graphics.Canvas) -> draw
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
com.aviary.android.feather.library.graphics.drawable.FastBitmapDrawable -> com.aviary.android.feather.library.c.a.e:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    android.graphics.Bitmap getBitmap() -> a
com.aviary.android.feather.library.graphics.drawable.FeatherDrawable -> com.aviary.android.feather.library.c.a.b:
    void setMinSize(float,float) -> a
    boolean validateSize(android.graphics.RectF) -> a
    void draw(android.graphics.Canvas) -> draw
    void setBounds(int,int,int,int) -> setBounds
    void setBounds(android.graphics.Rect) -> setBounds
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
com.aviary.android.feather.library.graphics.drawable.IBitmapDrawable -> com.aviary.android.feather.library.c.a.f:
    android.graphics.Bitmap getBitmap() -> a
com.aviary.android.feather.library.graphics.drawable.MemeTextDrawable -> com.aviary.android.feather.library.c.a.d:
    android.graphics.Paint mPaintStroke -> g
    int mContentWidth -> h
    int mContentHeight -> i
    float mInitialTextSize -> j
    int mCursorBlinkTime -> k
    boolean mTextChanged -> l
    float xoff -> m
    float yoff -> n
    android.graphics.Paint mTempPaint -> o
    float maxSize -> p
    float padW -> q
    boolean mBoundsChanged -> r
    void setContentSize(int,int) -> a
    void setTextStrokeColor(int) -> b
    int getTextStrokeColor() -> f
    void computeSize() -> g
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void setTextSize(float) -> a
    void setText(java.lang.String) -> a
    void invalidate() -> h
    boolean validateSize(android.graphics.RectF) -> a
    void setBounds(float,float,float,float) -> a
    void draw(android.graphics.Canvas) -> draw
    int getNumLines() -> i
com.aviary.android.feather.library.graphics.drawable.StickerDrawable -> com.aviary.android.feather.library.c.a.g:
    float minWidth -> a
    float minHeight -> b
    java.lang.String name -> c
    java.lang.String packageName -> d
    android.graphics.BlurMaskFilter mBlurFilter -> e
    android.graphics.Paint mShadowPaint -> f
    android.graphics.Bitmap mShadowBitmap -> g
    boolean mDrawShadow -> h
    android.graphics.Rect mTempRect -> i
    void draw(android.graphics.Canvas) -> draw
    void setDropShadow$1385ff() -> a
    java.lang.String getName() -> b
    java.lang.String getPackageName() -> c
    boolean validateSize(android.graphics.RectF) -> a
    void setMinSize(float,float) -> a
com.aviary.android.feather.library.graphics.drawable.TextDrawable -> com.aviary.android.feather.library.c.a.h:
    android.graphics.Paint mPaint -> a
    android.graphics.Paint mStrokePaint -> g
    java.lang.String mText -> b
    android.graphics.RectF mBoundsF -> c
    boolean mEditing -> d
    long mNow -> e
    boolean mShowCursor -> f
    int mWidth -> h
    int mHeight -> i
    int mMinTextWidth -> j
    float mMinWidth -> k
    float mMinHeight -> l
    java.util.List linesBreak -> m
    float minTextSize -> n
    android.graphics.Paint$FontMetrics metrics -> o
    float getMinWidth() -> k
    void computeSize() -> g
    float getTextWidth(int,int) -> a
    void copyBounds(android.graphics.RectF) -> b
    void draw(android.graphics.Canvas) -> draw
    void beginEdit() -> a
    void endEdit() -> b
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getIntrinsicWidth() -> getIntrinsicWidth
    void getLineBounds(int,android.graphics.Rect) -> a
    int getNumLines() -> i
    int getOpacity() -> getOpacity
    java.lang.CharSequence getText() -> d
    int getTextColor() -> e
    int getTextStrokeColor() -> f
    void setTextStrokeColor(int) -> b
    float getTextSize() -> j
    void invalidate() -> h
    boolean isEditing() -> c
    void setAlpha(int) -> setAlpha
    void setBounds(float,float,float,float) -> a
    void setBounds(int,int,int,int) -> setBounds
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setText(java.lang.CharSequence) -> a
    void setText(java.lang.String) -> a
    void setTextColor(int) -> a
    void setTextSize(float) -> a
    boolean validateSize(android.graphics.RectF) -> a
    void setMinSize(float,float) -> a
com.aviary.android.feather.library.log.LoggerFactory -> com.aviary.android.feather.library.e.c:
    boolean LOG_ENABLED -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger getLogger(java.lang.String,com.aviary.android.feather.library.log.LoggerFactory$LoggerType) -> a
com.aviary.android.feather.library.log.LoggerFactory$BaseLogger -> com.aviary.android.feather.library.e.b:
    java.lang.String tag -> a
com.aviary.android.feather.library.log.LoggerFactory$ConsoleLogger -> com.aviary.android.feather.library.e.d:
    java.lang.StringBuilder formatArguments(java.lang.Object[]) -> f
    void info(java.lang.Object[]) -> e
    void log(java.lang.Object[]) -> a
    void debug(java.lang.Object[]) -> b
    void warning(java.lang.Object[]) -> c
    void error(java.lang.Object[]) -> d
com.aviary.android.feather.library.log.LoggerFactory$Logger -> com.aviary.android.feather.library.e.f:
    void log(java.lang.Object[]) -> a
    void debug(java.lang.Object[]) -> b
    void warning(java.lang.Object[]) -> c
    void error(java.lang.Object[]) -> d
    void info(java.lang.Object[]) -> e
com.aviary.android.feather.library.log.LoggerFactory$LoggerType -> com.aviary.android.feather.library.e.e:
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType ConsoleLoggerType -> a
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType[] ENUM$VALUES -> b
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType[] values() -> values
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.log.LoggerFactory$NullLogger -> com.aviary.android.feather.library.e.a:
    void log(java.lang.Object[]) -> a
    void debug(java.lang.Object[]) -> b
    void warning(java.lang.Object[]) -> c
    void error(java.lang.Object[]) -> d
    void info(java.lang.Object[]) -> e
com.aviary.android.feather.library.moa.JSONWriter -> com.aviary.android.feather.library.moa.e:
    java.lang.Object mutex -> a
    java.lang.String encode(com.aviary.android.feather.library.moa.MoaActionList,com.aviary.android.feather.library.moa.MoaMetadata) -> a
com.aviary.android.feather.library.moa.Moa -> com.aviary.android.feather.library.moa.Moa:
    void init(java.lang.String) -> init
    void applyActions(com.aviary.android.feather.library.moa.MoaResult) -> applyActions
    java.lang.String queryActions(java.lang.String) -> queryActions
    java.lang.String[] getActions() -> getActions
    boolean cpuIsArmv7() -> cpuIsArmv7
    long loadSharedLibrary(java.lang.String) -> loadSharedLibrary
    boolean installSharedLibrary(long,java.lang.String) -> installSharedLibrary
    boolean unloadSharedLibrary(long,java.lang.String) -> unloadSharedLibrary
    long loadFile(java.lang.String) -> loadFile
com.aviary.android.feather.library.moa.MoaAction -> com.aviary.android.feather.library.moa.g:
    java.util.HashMap mOptions -> a
    java.lang.String name -> b
    void addParam(java.lang.String,java.lang.Object) -> a
    void setValue(java.lang.String,com.aviary.android.feather.library.moa.MoaParameter) -> a
    void setValue(java.lang.String,int) -> a
    void setValue(java.lang.String,float) -> a
    void setValue(java.lang.String,boolean) -> a
    java.util.Set entrySet() -> a
    java.lang.String getName() -> b
com.aviary.android.feather.library.moa.MoaActionFactory -> com.aviary.android.feather.library.moa.a:
    com.aviary.android.feather.library.moa.MoaActionList actionList() -> a
    com.aviary.android.feather.library.moa.MoaActionList actionList(java.lang.String[]) -> a
    com.aviary.android.feather.library.moa.MoaAction action(java.lang.String) -> a
com.aviary.android.feather.library.moa.MoaActionList -> com.aviary.android.feather.library.moa.d:
    java.util.List actions -> a
    java.lang.Object mutex -> b
    void clear() -> clear
    int size() -> size
    boolean add(com.aviary.android.feather.library.moa.MoaAction) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean addAll(int,java.util.Collection) -> addAll
    com.aviary.android.feather.library.moa.MoaAction get(int) -> a
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.lang.Object get(int) -> get
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
com.aviary.android.feather.library.moa.MoaFloatParameter -> com.aviary.android.feather.library.moa.c:
    java.lang.Object encode() -> a
com.aviary.android.feather.library.moa.MoaHD -> com.aviary.android.feather.library.moa.MoaHD:
    long m_nativeCtor(java.lang.String) -> m_nativeCtor
    boolean m_nativeIsValid(long) -> m_nativeIsValid
    void m_nativeDispose(long) -> m_nativeDispose
    void m_nativeApplyActions(long,java.lang.String) -> m_nativeApplyActions
    boolean m_nativeSave(long,java.lang.String) -> m_nativeSave
com.aviary.android.feather.library.moa.MoaMetadata -> com.aviary.android.feather.library.moa.h:
    int[] imagesize -> a
    int[] cellsize -> b
    int[] grid -> c
    int inplace -> d
    void setImageSize(int,int) -> a
    void setTransformInputBitmap$1385ff() -> a
    org.json.JSONObject encode() -> b
com.aviary.android.feather.library.moa.MoaParameter -> com.aviary.android.feather.library.moa.b:
    java.lang.String type -> a
    java.lang.Object value -> b
    java.lang.Object encode() -> a
com.aviary.android.feather.library.moa.MoaPointParameter -> com.aviary.android.feather.library.moa.f:
    void init() -> b
    void setValue(float,float) -> a
    void setValue(double,double) -> a
    java.lang.Object encode() -> a
com.aviary.android.feather.library.moa.MoaResult -> com.aviary.android.feather.library.moa.MoaResult:
    java.lang.String inputString -> inputString
    android.graphics.Bitmap inputBitmap -> inputBitmap
    java.lang.String outputString -> outputString
    android.graphics.Bitmap outputBitmap -> outputBitmap
    int active -> active
    void execute() -> a
com.aviary.android.feather.library.plugins.BackgroundRunnable -> com.aviary.android.feather.library.a.c:
    com.aviary.android.feather.library.plugins.BackgroundRunnable$OnUpdateListener mListener -> a
    void setOnUpdateListener(com.aviary.android.feather.library.plugins.BackgroundRunnable$OnUpdateListener) -> a
    void requestUpdate() -> c
com.aviary.android.feather.library.plugins.BackgroundRunnable$OnUpdateListener -> com.aviary.android.feather.library.a.a:
    void onUpdate(com.aviary.android.feather.library.plugins.BackgroundRunnable) -> a
com.aviary.android.feather.library.plugins.PluginManager -> com.aviary.android.feather.library.a.b:
    android.content.pm.ApplicationInfo mThisInfo -> a
    android.content.Context mContext -> b
    java.lang.String mBaseName -> c
    java.util.HashMap mInstalled -> d
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> e
    void update() -> a
    java.util.HashMap getInstalledPlugins() -> b
    void run() -> run
    boolean validPackage(android.content.Context,java.lang.String,java.lang.String) -> a
com.aviary.android.feather.library.services.EffectContext -> com.aviary.android.feather.library.services.EffectContext:
    java.lang.Object getService(java.lang.Class) -> a
    android.content.Context getBaseContext() -> b
    android.graphics.Matrix getCurrentImageViewMatrix() -> f
    void cancel() -> k
    void setToolbarTitle(int) -> a
    void restoreToolbarTitle() -> p
com.aviary.android.feather.library.services.EffectContextService -> com.aviary.android.feather.library.services.EffectContextService:
    com.aviary.android.feather.library.services.EffectContext mContext -> a
    com.aviary.android.feather.library.services.EffectContext getContext() -> c
    void dispose() -> a
com.aviary.android.feather.library.services.PluginService -> com.aviary.android.feather.library.services.PluginService:
    android.content.pm.PackageManager mPackageManager -> a
    java.util.HashMap mInstalled -> b
    java.util.SortedMap mStickers -> c
    java.util.SortedMap mFilters -> d
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> e
    java.lang.Object mLock -> f
    java.util.List mListeners -> g
    java.lang.Boolean mIsUpdating -> h
    void registerOnUpdateListener(com.aviary.android.feather.library.services.PluginService$OnUpdateListener) -> a
    void removeOnUpdateListener(com.aviary.android.feather.library.services.PluginService$OnUpdateListener) -> b
    void dispatchUpdate() -> d
    void update(android.content.Intent) -> a
    void update(java.util.HashMap) -> a
    android.content.pm.ApplicationInfo[] getInstalledStickers() -> b
    java.lang.CharSequence loadStickerLabel(android.content.pm.ApplicationInfo) -> a
    android.graphics.drawable.Drawable loadStickerIcon(android.content.pm.ApplicationInfo) -> b
    void dispose() -> a
    int getInteger$22181c96(android.content.res.Resources,java.lang.String,java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,java.lang.String,java.lang.String) -> b
    android.content.res.Resources getResources(android.content.pm.ApplicationInfo) -> c
    android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String) -> a
    void printPlugins() -> e
com.aviary.android.feather.library.services.PluginService$OnUpdateListener -> com.aviary.android.feather.library.services.a:
    void onUpdate() -> c_
com.aviary.android.feather.library.services.ServiceLoader -> com.aviary.android.feather.library.services.b:
    java.util.HashMap mMap -> a
    java.util.HashMap mServices -> b
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> c
    com.aviary.android.feather.library.services.EffectContextService getService(java.lang.Class,com.aviary.android.feather.library.services.EffectContext) -> a
    void register(java.lang.Class) -> a
    void register(com.aviary.android.feather.library.services.EffectContextService) -> a
    com.aviary.android.feather.library.services.EffectContextService get(java.lang.String,com.aviary.android.feather.library.services.EffectContext) -> a
    void dispose() -> a
com.aviary.android.feather.library.tracking.Constants -> com.aviary.android.feather.library.d.l:
    long SESSION_EXPIRATION -> a
    boolean IS_LOGGABLE -> b
    boolean ENABLE_PARAMETER_CHECKING -> c
    boolean IS_EXCEPTION_SUPPRESSION_ENABLED -> d
    int CURRENT_API_LEVEL -> e
com.aviary.android.feather.library.tracking.DatapointHelper -> com.aviary.android.feather.library.d.h:
    int getApiLevel() -> a
    java.lang.String getAndroidIdHashOrNull(android.content.Context) -> a
    java.lang.String getSerialNumberHashOrNull() -> b
    java.lang.String getTelephonyDeviceIdOrNull(android.content.Context) -> b
    java.lang.String getManufacturer() -> c
    java.lang.String getAppVersion(android.content.Context) -> c
    java.lang.String getSha256(java.lang.String) -> a
com.aviary.android.feather.library.tracking.LocalyticsProvider -> com.aviary.android.feather.library.d.i:
    java.util.Map sLocalyticsProviderMap -> a
    java.lang.Object[] sLocalyticsProviderIntrinsicLock -> b
    java.util.Set sValidTables -> c
    android.database.sqlite.SQLiteDatabase mDb -> d
    com.aviary.android.feather.library.tracking.LocalyticsProvider getInstance(android.content.Context,java.lang.String) -> a
    long insert(java.lang.String,android.content.ContentValues) -> a
    android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[]) -> a
    int delete(java.lang.String,java.lang.String,java.lang.String[]) -> a
    void runBatchTransaction(java.lang.Runnable) -> a
    boolean isValidTable(java.lang.String) -> a
    void deleteOldFiles(android.content.Context) -> a
    boolean deleteDirectory(java.io.File) -> a
com.aviary.android.feather.library.tracking.LocalyticsProvider$DatabaseHelper -> com.aviary.android.feather.library.d.m:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.aviary.android.feather.library.tracking.LocalyticsSession -> com.aviary.android.feather.library.d.a:
    java.lang.String OPEN_EVENT -> a
    java.lang.String CLOSE_EVENT -> b
    java.lang.String OPT_IN_EVENT -> c
    java.lang.String OPT_OUT_EVENT -> d
    java.lang.String FLOW_EVENT -> e
    android.os.HandlerThread sSessionHandlerThread -> f
    android.os.HandlerThread sUploadHandlerThread -> g
    android.os.Handler mSessionHandler -> h
    android.content.Context mContext -> i
    java.lang.String mLocalyticsKey -> j
    java.util.Map sIsUploadingMap -> k
    android.os.HandlerThread getHandlerThread(java.lang.String) -> a
    void open() -> a
    void close() -> b
    void tagEvent(java.lang.String,java.util.Map) -> a
    void upload() -> c
    java.util.Map access$0() -> d
    android.os.HandlerThread access$1() -> e
com.aviary.android.feather.library.tracking.LocalyticsSession$Pair -> com.aviary.android.feather.library.d.j:
    java.lang.Object first -> a
    java.lang.Object second -> b
com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler -> com.aviary.android.feather.library.d.n:
    java.lang.String UPLOAD_BLOBS_EVENTS_SORT_ORDER -> a
    java.lang.String EVENTS_SORT_ORDER -> b
    android.content.Context mContext -> c
    com.aviary.android.feather.library.tracking.LocalyticsProvider mProvider -> d
    java.lang.String mApiKey -> e
    long mApiKeyId -> f
    long mSessionId -> g
    boolean mIsSessionOpen -> h
    boolean mIsOptedOut -> i
    android.os.Handler mUploadHandler -> j
    int[] $SWITCH_TABLE$android$database$CursorJoiner$Result -> k
    void handleMessage(android.os.Message) -> handleMessage
    void open(boolean) -> a
    void openNewSession() -> c
    void close() -> a
    void tagEvent(java.lang.String,java.util.Map) -> a
    void conditionallyAddFlowEvent() -> d
    void preUploadBuildBlobs() -> b
    com.aviary.android.feather.library.tracking.LocalyticsProvider access$0(com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler) -> a
    long access$1(com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler) -> b
    boolean access$2(com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler) -> c
    int[] $SWITCH_TABLE$android$database$CursorJoiner$Result() -> e
    void access$4(com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler,long) -> a
    long access$5(com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler) -> d
com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler$1 -> com.aviary.android.feather.library.d.b:
    com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler this$1 -> a
    boolean val$isOptingOut -> b
    void run() -> run
com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler$2 -> com.aviary.android.feather.library.d.d:
    com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler this$1 -> a
    java.lang.String val$sessionId -> b
    java.util.List val$blobsToDelete -> c
    void run() -> run
com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler$3 -> com.aviary.android.feather.library.d.c:
    com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler this$1 -> a
    android.content.ContentValues val$values -> b
    void run() -> run
com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler$4 -> com.aviary.android.feather.library.d.e:
    com.aviary.android.feather.library.tracking.LocalyticsSession$SessionHandler this$1 -> a
    void run() -> run
com.aviary.android.feather.library.tracking.LocalyticsSession$UploadHandler -> com.aviary.android.feather.library.d.g:
    com.aviary.android.feather.library.tracking.LocalyticsProvider mProvider -> a
    android.content.Context mContext -> b
    java.lang.String mApiKey -> c
    android.os.Handler mSessionHandler -> d
    void handleMessage(android.os.Message) -> handleMessage
    boolean uploadSessions(java.lang.String,java.lang.String) -> a
    java.util.List convertDatabaseToJson() -> a
    long getApiKeyCreationTime(com.aviary.android.feather.library.tracking.LocalyticsProvider,java.lang.String) -> a
    org.json.JSONObject getAttributesFromSession(com.aviary.android.feather.library.tracking.LocalyticsProvider,java.lang.String,long) -> a
    org.json.JSONObject convertEventToJson(com.aviary.android.feather.library.tracking.LocalyticsProvider,android.content.Context,long,long,java.lang.String) -> a
    long getSessionIdForEventId(com.aviary.android.feather.library.tracking.LocalyticsProvider,long) -> a
    java.lang.String getSessionUuid(com.aviary.android.feather.library.tracking.LocalyticsProvider,long) -> b
    long getSessionStartTime(com.aviary.android.feather.library.tracking.LocalyticsProvider,long) -> c
    org.json.JSONObject convertAttributesToJson(com.aviary.android.feather.library.tracking.LocalyticsProvider,long) -> d
    long getSessionIdForBlobId(long) -> a
    com.aviary.android.feather.library.tracking.LocalyticsProvider access$0(com.aviary.android.feather.library.tracking.LocalyticsSession$UploadHandler) -> a
com.aviary.android.feather.library.tracking.LocalyticsSession$UploadHandler$1 -> com.aviary.android.feather.library.d.k:
    com.aviary.android.feather.library.tracking.LocalyticsSession$UploadHandler this$1 -> a
    void run() -> run
com.aviary.android.feather.library.tracking.ReflectionUtils -> com.aviary.android.feather.library.d.o:
    java.lang.Object tryInvokeInstance(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object helper$96a87c9(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[]) -> b
com.aviary.android.feather.library.tracking.Tracker -> com.aviary.android.feather.library.d.f:
    com.aviary.android.feather.library.tracking.LocalyticsSession localyticsSession -> a
    java.lang.String mAppName -> b
    java.lang.String mApiKey -> c
    java.lang.String mSdkVersion -> d
    boolean recordTag(java.lang.String) -> a
    boolean recordTag(java.lang.String,java.util.HashMap) -> a
    boolean create(android.content.Context,java.lang.String,java.lang.String,java.lang.Integer) -> a
    void setApiKey(java.lang.String) -> b
    void open() -> a
    void upload() -> b
    boolean close() -> c
com.aviary.android.feather.library.utils.BitmapUtils -> com.aviary.android.feather.library.b.d:
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$BitmapUtils$ROTATION -> a
    android.graphics.Bitmap copy(android.graphics.Bitmap,android.graphics.Bitmap$Config) -> a
    android.graphics.Bitmap createThumbnail$90ccdff(android.graphics.Bitmap,int,int,com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE) -> a
    android.graphics.Bitmap createThumbnail$2470777f$7252f49b(android.graphics.Bitmap,int,int,com.aviary.android.feather.library.utils.BitmapUtils$ROTATION,com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE,android.graphics.drawable.Drawable) -> a
    void drawBitmapOnCanvas$17971624(android.graphics.Bitmap,int,int,com.aviary.android.feather.library.utils.BitmapUtils$ROTATION,com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE,int,android.graphics.Canvas) -> a
    int getExifOrientation(android.content.Context,android.net.Uri) -> a
    int getExifOrientation(java.lang.String) -> a
    android.graphics.Bitmap resizeBitmap(android.graphics.Bitmap,int,int,int) -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$BitmapUtils$ROTATION() -> a
com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE -> com.aviary.android.feather.library.b.b:
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE None -> a
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE Horizontal -> b
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE Vertical -> c
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE HorizontalVertical -> d
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE[] ENUM$VALUES -> e
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE[] values() -> values
    com.aviary.android.feather.library.utils.BitmapUtils$FLIP_MODE valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.utils.BitmapUtils$ROTATION -> com.aviary.android.feather.library.b.f:
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION ROTATE_90 -> a
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION ROTATE_180 -> b
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION ROTATE_270 -> c
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION ROTATE_NULL -> d
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION[] ENUM$VALUES -> e
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION[] values() -> values
    com.aviary.android.feather.library.utils.BitmapUtils$ROTATION valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.utils.IOUtils -> com.aviary.android.feather.library.b.i:
    void closeSilently(java.io.Closeable) -> a
com.aviary.android.feather.library.utils.ImageLoader -> com.aviary.android.feather.library.b.c:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    int computeSampleSize(java.io.InputStream,int,int,int,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
    android.graphics.Bitmap loadFromAsset(android.content.res.Resources,java.lang.String,int,int) -> a
    android.graphics.Bitmap loadFromUri(android.content.Context,android.net.Uri,int,int,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
com.aviary.android.feather.library.utils.ImageLoader$ImageSizes -> com.aviary.android.feather.library.b.k:
    java.lang.String originalSize -> a
    java.lang.String newSize -> b
    java.lang.String bucketSize -> c
    java.lang.String getBucketSize() -> a
    java.lang.String getOriginalSize() -> b
    java.lang.String getNewSize() -> c
com.aviary.android.feather.library.utils.MatrixUtils -> com.aviary.android.feather.library.b.g:
    void mapPoints(android.graphics.Matrix,float[]) -> a
com.aviary.android.feather.library.utils.PackageManagerUtils -> com.aviary.android.feather.library.b.l:
    android.content.pm.ApplicationInfo mInfo -> a
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> a
com.aviary.android.feather.library.utils.ResourceManager -> com.aviary.android.feather.library.b.h:
    android.content.pm.PackageManager mPackageManager -> a
    java.lang.String mPackageName -> b
    android.content.res.Resources mResources -> c
    android.content.Context mContext -> d
    void setPackageName(java.lang.String) -> e
    java.lang.String getPackageName() -> a
    android.content.res.Resources getResources() -> b
    java.lang.String[] listAssets(java.lang.String) -> a
    java.lang.String[] listFilters() -> c
    java.io.InputStream openAsset(java.lang.String) -> b
    android.graphics.drawable.Drawable getDrawable(java.lang.String) -> c
    int getInteger$505cff29(java.lang.String) -> d
    java.lang.CharSequence getString(java.lang.String,java.lang.CharSequence) -> a
    int getIdentifier(java.lang.String,java.lang.String) -> a
com.aviary.android.feather.library.utils.UserTask -> com.aviary.android.feather.library.b.a:
    java.util.concurrent.BlockingQueue sWorkQueue -> a
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.ThreadPoolExecutor sExecutor -> c
    com.aviary.android.feather.library.utils.UserTask$InternalHandler sHandler -> d
    com.aviary.android.feather.library.utils.UserTask$WorkerRunnable mWorker -> e
    java.util.concurrent.FutureTask mFuture -> f
    com.aviary.android.feather.library.utils.UserTask$Status mStatus -> g
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$UserTask$Status -> h
    java.lang.Object doInBackground$42af7916() -> a
    void onPreExecute() -> b
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> a
    void onCancelled() -> c
    boolean isCancelled() -> d
    boolean cancel$138603() -> e
    com.aviary.android.feather.library.utils.UserTask execute(java.lang.Object[]) -> b
    void publishProgress(java.lang.Object[]) -> c
    void access$0(com.aviary.android.feather.library.utils.UserTask,java.lang.Object) -> a
    com.aviary.android.feather.library.utils.UserTask$InternalHandler access$1() -> f
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$UserTask$Status() -> g
com.aviary.android.feather.library.utils.UserTask$1 -> com.aviary.android.feather.library.b.p:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.aviary.android.feather.library.utils.UserTask$2 -> com.aviary.android.feather.library.b.q:
    com.aviary.android.feather.library.utils.UserTask this$0 -> b
    java.lang.Object call() -> call
com.aviary.android.feather.library.utils.UserTask$3 -> com.aviary.android.feather.library.b.o:
    com.aviary.android.feather.library.utils.UserTask this$0 -> a
    void done() -> done
com.aviary.android.feather.library.utils.UserTask$InternalHandler -> com.aviary.android.feather.library.b.j:
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.library.utils.UserTask$Status -> com.aviary.android.feather.library.b.e:
    com.aviary.android.feather.library.utils.UserTask$Status PENDING -> a
    com.aviary.android.feather.library.utils.UserTask$Status RUNNING -> b
    com.aviary.android.feather.library.utils.UserTask$Status FINISHED -> c
    com.aviary.android.feather.library.utils.UserTask$Status[] ENUM$VALUES -> d
    com.aviary.android.feather.library.utils.UserTask$Status[] values() -> values
    com.aviary.android.feather.library.utils.UserTask$Status valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.utils.UserTask$UserTaskResult -> com.aviary.android.feather.library.b.n:
    com.aviary.android.feather.library.utils.UserTask mTask -> a
    java.lang.Object[] mData -> b
com.aviary.android.feather.library.utils.UserTask$WorkerRunnable -> com.aviary.android.feather.library.b.m:
    java.lang.Object[] mParams -> a
com.aviary.android.feather.receivers.FeatherSystemReceiver -> com.aviary.android.feather.receivers.FeatherSystemReceiver:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void handlePackage(android.content.Context,java.lang.String,android.content.Intent) -> a
    boolean isReplacing(android.os.Bundle) -> a
com.aviary.android.feather.services.BackgroundService -> com.aviary.android.feather.services.BackgroundService:
    java.util.LinkedList tasks -> a
    java.util.List internalTasks -> b
    java.lang.Thread thread -> c
    boolean running -> d
    java.lang.Runnable internalRunnable -> e
    android.os.Handler mHandler -> f
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> g
    void setHandler(android.os.Handler) -> a
    void register$93d846f(com.aviary.android.feather.library.plugins.BackgroundRunnable) -> b
    com.aviary.android.feather.library.plugins.BackgroundRunnable getInternalTask(java.lang.Class) -> a
    void start() -> b
    void stop() -> d
    java.lang.Runnable getNextTask() -> e
    void onUpdate(com.aviary.android.feather.library.plugins.BackgroundRunnable) -> a
    void dispose() -> a
    void access$0(com.aviary.android.feather.services.BackgroundService) -> a
com.aviary.android.feather.services.BackgroundService$InternalRunnable -> com.aviary.android.feather.services.a:
    com.aviary.android.feather.services.BackgroundService this$0 -> a
    void run() -> run
com.aviary.android.feather.services.CacheManagerService -> com.aviary.android.feather.services.CacheManagerService:
    java.io.File mCacheDir -> a
    void dispose() -> a
com.aviary.android.feather.services.ConfigService -> com.aviary.android.feather.services.ConfigService:
    android.content.res.Resources mResources -> a
    int getInteger(int) -> a
    int[] getIntArray(int) -> b
    int getColor(int) -> c
    boolean getBoolean(int) -> d
    java.lang.String getString(int) -> e
    java.lang.String[] getStringArray(int) -> f
    void dispose() -> a
com.aviary.android.feather.utils.SystemUtils -> com.aviary.android.feather.c.b:
    java.lang.String mCpuInfo -> a
    java.lang.String cpuInfo() -> b
    float getCpuSpeed() -> a
com.aviary.android.feather.utils.ThreadUtils -> com.aviary.android.feather.c.e:
    void startBackgroundJob$1471aef7(com.aviary.android.feather.MonitoredActivity,java.lang.String,java.lang.Runnable,android.os.Handler) -> a
com.aviary.android.feather.utils.ThreadUtils$BackgroundJob -> com.aviary.android.feather.c.c:
    com.aviary.android.feather.MonitoredActivity mActivity -> a
    android.app.ProgressDialog mDialog -> b
    java.lang.Runnable mJob -> c
    android.os.Handler mHandler -> d
    java.lang.Runnable mCleanupRunner -> e
    void run() -> run
    void onActivityDestroyed$467f814b() -> a
    void onActivityStopped$467f814b() -> c
    void onActivityStarted$467f814b() -> b
    com.aviary.android.feather.MonitoredActivity access$0(com.aviary.android.feather.utils.ThreadUtils$BackgroundJob) -> a
    android.app.ProgressDialog access$1(com.aviary.android.feather.utils.ThreadUtils$BackgroundJob) -> b
com.aviary.android.feather.utils.ThreadUtils$BackgroundJob$1 -> com.aviary.android.feather.c.a:
    com.aviary.android.feather.utils.ThreadUtils$BackgroundJob this$1 -> a
    void run() -> run
com.aviary.android.feather.utils.UIUtils -> com.aviary.android.feather.c.d:
    android.content.Context mContext -> a
    android.view.LayoutInflater mLayoutInflater -> b
    void init(android.content.Context) -> a
    int getScreenOptimalColumns() -> a
    int getScreenOptimalColumns(int) -> a
    int widthPixels() -> b
com.aviary.android.feather.widget.AbsSpinner -> com.aviary.android.feather.widget.AbsSpinner:
    android.widget.SpinnerAdapter mAdapter -> r
    int mHeightMeasureSpec -> s
    int mWidthMeasureSpec -> t
    boolean mBlockLayoutRequests -> u
    int mSelectionLeftPadding -> a
    int mSelectionTopPadding -> A
    int mSelectionRightPadding -> B
    int mSelectionBottomPadding -> C
    android.graphics.Rect mSpinnerPadding -> v
    int mPaddingLeft -> w
    int mPaddingRight -> x
    int mPaddingTop -> D
    int mPaddingBottom -> E
    com.aviary.android.feather.widget.AbsSpinner$RecycleBin mRecycler -> y
    com.aviary.android.feather.widget.AbsSpinner$RecycleBin mRecyclerInvalidItems -> z
    android.database.DataSetObserver mDataSetObserver -> F
    android.graphics.Rect mTouchFrame -> G
    void setPadding(int,int,int,int) -> setPadding
    void setAdapter(android.widget.SpinnerAdapter) -> a
    void resetList() -> m
    void onMeasure(int,int) -> onMeasure
    int getChildHeight(android.view.View) -> a
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void setSelection$2563266(int) -> e
    void layout$2563266() -> d
    android.view.View getSelectedView() -> g
    void requestLayout() -> requestLayout
    android.widget.SpinnerAdapter getAdapter() -> n
    int getCount() -> h
    int pointToPosition(int,int) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.widget.Adapter getAdapter() -> e
    void access$2$754e3953(com.aviary.android.feather.widget.AbsSpinner,android.view.View) -> a
com.aviary.android.feather.widget.AbsSpinner$RecycleBin -> com.aviary.android.feather.widget.j:
    android.util.SparseArray mScrapHeap -> a
    java.util.ArrayList mHeap -> b
    com.aviary.android.feather.widget.AbsSpinner this$0 -> c
    void put$4d81c81c(android.view.View) -> a
    android.view.View get$7529eef0() -> a
    void clear() -> b
com.aviary.android.feather.widget.AbsSpinner$SavedState -> com.aviary.android.feather.widget.AbsSpinner$SavedState:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.aviary.android.feather.widget.AbsSpinner$SavedState$1 -> com.aviary.android.feather.widget.ab:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.widget.AdapterView -> com.aviary.android.feather.widget.AdapterView:
    int mFirstPosition -> b
    int mSpecificTop -> a
    int mSyncPosition -> c
    long mSyncRowId -> d
    long mSyncHeight -> r
    boolean mNeedSync -> e
    int mSyncMode -> f
    int mLayoutHeight -> s
    boolean mInLayout -> g
    com.aviary.android.feather.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> t
    com.aviary.android.feather.widget.AdapterView$OnItemClickListener mOnItemClickListener -> u
    com.aviary.android.feather.widget.AdapterView$OnItemLongClickListener mOnItemLongClickListener -> h
    boolean mDataChanged -> i
    int mNextSelectedPosition -> j
    long mNextSelectedRowId -> k
    int mSelectedPosition -> l
    long mSelectedRowId -> m
    android.view.View mEmptyView -> v
    int mItemCount -> n
    int mOldItemCount -> o
    int mOldSelectedPosition -> p
    long mOldSelectedRowId -> q
    boolean mDesiredFocusableState -> w
    boolean mDesiredFocusableInTouchModeState -> x
    com.aviary.android.feather.widget.AdapterView$SelectionNotifier mSelectionNotifier -> y
    boolean mBlockLayoutRequests -> z
    boolean performItemClick$17e13fde(android.view.View) -> b
    android.widget.Adapter getAdapter() -> e
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getSelectedItemPosition() -> f
    android.view.View getSelectedView() -> g
    int getCount() -> h
    int getPositionForView(android.view.View) -> c
    int getLastVisiblePosition() -> a
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> i
    long getItemIdAtPosition(int) -> c
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void onDetachedFromWindow() -> onDetachedFromWindow
    void selectionChanged() -> c
    void fireOnSelected() -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    boolean isScrollableForAccessibility() -> d
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> j
    void checkSelectionChanged() -> k
    void setSelectedPositionInt(int) -> b
    void setNextSelectedPositionInt(int) -> d
    void rememberSyncState() -> l
    void access$0(com.aviary.android.feather.widget.AdapterView,android.os.Parcelable) -> a
    android.os.Parcelable access$1(com.aviary.android.feather.widget.AdapterView) -> a
    void access$2(com.aviary.android.feather.widget.AdapterView) -> b
com.aviary.android.feather.widget.AdapterView$AdapterContextMenuInfo -> com.aviary.android.feather.widget.bm:
    android.view.View targetView -> a
    int position -> b
    long id -> c
com.aviary.android.feather.widget.AdapterView$AdapterDataSetObserver -> com.aviary.android.feather.widget.bt:
    android.os.Parcelable mInstanceState -> a
    com.aviary.android.feather.widget.AdapterView this$0 -> b
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.AdapterView$OnItemClickListener -> com.aviary.android.feather.widget.k:
com.aviary.android.feather.widget.AdapterView$OnItemLongClickListener -> com.aviary.android.feather.widget.ae:
    boolean onItemLongClick$638b78d() -> a
com.aviary.android.feather.widget.AdapterView$OnItemSelectedListener -> com.aviary.android.feather.widget.aa:
com.aviary.android.feather.widget.AdapterView$SelectionNotifier -> com.aviary.android.feather.widget.bv:
    com.aviary.android.feather.widget.AdapterView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView -> com.aviary.android.feather.widget.AdjustImageView:
    android.net.Uri mUri -> h
    int mResource -> i
    android.graphics.Matrix mMatrix -> j
    com.aviary.android.feather.widget.AdjustImageView$ScaleType mScaleType -> k
    boolean mAdjustViewBounds -> l
    int mMaxWidth -> m
    int mMaxHeight -> n
    android.graphics.ColorFilter mColorFilter -> o
    int mAlpha -> p
    int mViewAlphaScale -> q
    boolean mColorMod -> r
    android.graphics.drawable.Drawable mDrawable -> s
    int[] mState -> t
    boolean mMergeState -> u
    int mLevel -> v
    int mDrawableWidth -> w
    int mDrawableHeight -> x
    android.graphics.Matrix mDrawMatrix -> y
    android.graphics.Matrix mRotateMatrix -> z
    android.graphics.Matrix mFlipMatrix -> A
    android.graphics.RectF mTempSrc -> B
    android.graphics.RectF mTempDst -> C
    boolean mCropToPadding -> D
    int mBaseline -> E
    boolean mBaselineAlignBottom -> F
    boolean mHaveFrame -> G
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> H
    boolean isReset -> a
    int resetAnimTime -> I
    com.aviary.android.feather.widget.AdjustImageView$OnResetListener mResetListener -> J
    com.aviary.android.feather.widget.AdjustImageView$ScaleType[] sScaleTypeArray -> K
    android.graphics.Matrix$ScaleToFit[] sS2FArray -> L
    android.os.Handler mHandler -> b
    int mRotation -> c
    float mCurrentScale -> d
    float mVerticalScale -> e
    boolean mRunning -> f
    boolean mCameraEnabled -> M
    float[] mMatrixValues -> N
    int mFlipType -> g
    void setResetAnimDuration(int) -> a
    void setOnResetListener(com.aviary.android.feather.widget.AdjustImageView$OnResetListener) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    boolean onSetAlpha(int) -> onSetAlpha
    void setImageBitmap(android.graphics.Bitmap) -> a
    void setSelected(boolean) -> setSelected
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    void updateDrawable(android.graphics.drawable.Drawable) -> a
    android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(com.aviary.android.feather.widget.AdjustImageView$ScaleType) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int resolveAdjustedSize(int,int,int) -> a
    void configureBounds() -> f
    void drawableStateChanged() -> drawableStateChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    int getBaseline() -> getBaseline
    void applyColorMod() -> g
    void rotate90(boolean,int) -> a
    void printDetails() -> a
    void flip(boolean,int) -> b
    void setCameraEnabled(boolean) -> a
    float getValue(android.graphics.Matrix,int) -> a
    float[] getMatrixScale(android.graphics.Matrix) -> a
    float getRotation() -> getRotation
    boolean getHorizontalFlip() -> b
    boolean getVerticalFlip() -> c
    int getFlipType() -> d
    void reset() -> e
    void onReset() -> h
    it.sephiroth.android.library.imagezoom.easing.Easing access$0(com.aviary.android.feather.widget.AdjustImageView) -> a
    android.graphics.Matrix access$1(com.aviary.android.feather.widget.AdjustImageView) -> b
    void access$2(com.aviary.android.feather.widget.AdjustImageView) -> c
    boolean access$3(com.aviary.android.feather.widget.AdjustImageView) -> d
    android.graphics.Matrix access$4(com.aviary.android.feather.widget.AdjustImageView) -> e
    android.graphics.Matrix access$5(com.aviary.android.feather.widget.AdjustImageView) -> f
com.aviary.android.feather.widget.AdjustImageView$1 -> com.aviary.android.feather.widget.br:
    float old_scale -> a
    float old_rotation -> b
    com.aviary.android.feather.widget.AdjustImageView this$0 -> c
    int val$durationMs -> d
    long val$startTime -> e
    boolean val$cw -> f
    int val$centerX -> g
    int val$centerY -> h
    int val$vwidth -> i
    int val$vheight -> j
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$2 -> com.aviary.android.feather.widget.bs:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    android.graphics.Camera val$camera -> d
    boolean val$horizontal -> e
    float val$centerx -> f
    float val$centery -> g
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$FlipType -> com.aviary.android.feather.widget.ag:
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_NONE -> a
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_HORIZONTAL -> b
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_VERTICAL -> c
    int nativeInt -> d
    com.aviary.android.feather.widget.AdjustImageView$FlipType[] ENUM$VALUES -> e
    com.aviary.android.feather.widget.AdjustImageView$FlipType[] values() -> values
    com.aviary.android.feather.widget.AdjustImageView$FlipType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.AdjustImageView$OnResetListener -> com.aviary.android.feather.widget.be:
    void onResetComplete() -> u
com.aviary.android.feather.widget.AdjustImageView$ScaleType -> com.aviary.android.feather.widget.bq:
    com.aviary.android.feather.widget.AdjustImageView$ScaleType MATRIX -> a
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_XY -> b
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_START -> c
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_CENTER -> d
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_END -> e
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER -> f
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER_CROP -> g
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER_INSIDE -> h
    int nativeInt -> i
    com.aviary.android.feather.widget.AdjustImageView$ScaleType[] ENUM$VALUES -> j
    com.aviary.android.feather.widget.AdjustImageView$ScaleType[] values() -> values
    com.aviary.android.feather.widget.AdjustImageView$ScaleType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.BottombarViewFlipper -> com.aviary.android.feather.widget.BottombarViewFlipper:
    android.view.animation.Animation$AnimationListener mOpenAnimationListener -> a
    android.view.animation.Animation$AnimationListener mCloseAnimationListener -> b
    com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelOpenListener mOpenListener -> c
    com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelCloseListener mCloseListener -> d
    int mAnimationDuration -> e
    int mToolPanelIndex -> f
    int mContentPanelIndex -> g
    android.view.ViewGroup getContent() -> a
    android.view.ViewGroup getToolPanel() -> d
    void close() -> b
    void open() -> c
    android.view.animation.Animation createVoidAnimation(int,int) -> a
    void setOnPanelOpenListener(com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelOpenListener) -> a
    void setOnPanelCloseListener(com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelCloseListener) -> a
    com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelOpenListener access$0(com.aviary.android.feather.widget.BottombarViewFlipper) -> a
    com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelCloseListener access$1(com.aviary.android.feather.widget.BottombarViewFlipper) -> b
com.aviary.android.feather.widget.BottombarViewFlipper$1 -> com.aviary.android.feather.widget.i:
    com.aviary.android.feather.widget.BottombarViewFlipper this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.BottombarViewFlipper$2 -> com.aviary.android.feather.widget.h:
    com.aviary.android.feather.widget.BottombarViewFlipper this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.BottombarViewFlipper$3 -> com.aviary.android.feather.widget.g:
    com.aviary.android.feather.widget.BottombarViewFlipper this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelCloseListener -> com.aviary.android.feather.widget.c:
    void onClosing() -> a
    void onClosed() -> b
com.aviary.android.feather.widget.BottombarViewFlipper$OnPanelOpenListener -> com.aviary.android.feather.widget.ax:
    void onOpening() -> b
    void onOpened() -> a
com.aviary.android.feather.widget.BottombarViewFlipper$VoidAnimation -> com.aviary.android.feather.widget.bj:
    com.aviary.android.feather.widget.BottombarViewFlipper this$0 -> a
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
com.aviary.android.feather.widget.BrushHighlight -> com.aviary.android.feather.widget.ar:
    android.view.View mContext -> a
    java.util.List mBrushes -> b
    void addTouch(float,float,long,float) -> a
    void clear() -> a
    void draw(android.graphics.Canvas) -> a
com.aviary.android.feather.widget.BrushHighlight$Brush -> com.aviary.android.feather.widget.bg:
    android.graphics.Paint mPaint -> a
    long mStartTime -> b
    long mDurationMs -> c
    boolean mActive -> d
    double mX -> e
    double mY -> f
    double mEndSize -> g
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> h
    com.aviary.android.feather.widget.BrushHighlight this$0 -> i
    void draw(android.graphics.Canvas) -> a
    boolean access$0(com.aviary.android.feather.widget.BrushHighlight$Brush) -> a
com.aviary.android.feather.widget.CropImageView -> com.aviary.android.feather.widget.CropImageView:
    int mMotionEdge -> n
    com.aviary.android.feather.widget.HighlightView mHighlightView -> o
    com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener mHighlightSingleTapUpListener -> p
    com.aviary.android.feather.widget.HighlightView mMotionHighlightView -> q
    int mCropMinSize -> r
    double mAspectRatio -> s
    boolean mAspectRatioFixed -> t
    void setOnHighlightSingleTapUpConfirmedListener(com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener) -> a
    void setMinCropSize(int) -> a
    void init() -> a
    void setImageBitmap(android.graphics.Bitmap,boolean) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void setHighlightView(com.aviary.android.feather.widget.HighlightView) -> a
    com.aviary.android.feather.widget.HighlightView getHighlightView() -> c
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    float onDoubleTapPost(float,float) -> b
    void setImageBitmap(android.graphics.Bitmap,double) -> a
    void setAspectRatio(double,boolean) -> a
    void onBitmapChanged(android.graphics.drawable.Drawable) -> a
    void access$0(com.aviary.android.feather.widget.CropImageView,com.aviary.android.feather.widget.HighlightView) -> a
    com.aviary.android.feather.widget.HighlightView access$1(com.aviary.android.feather.widget.CropImageView) -> a
    void access$2(com.aviary.android.feather.widget.CropImageView,int) -> a
    com.aviary.android.feather.widget.HighlightView access$3(com.aviary.android.feather.widget.CropImageView) -> b
    int access$4(com.aviary.android.feather.widget.CropImageView) -> c
    com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener access$5(com.aviary.android.feather.widget.CropImageView) -> d
    boolean access$6(com.aviary.android.feather.widget.CropImageView) -> e
    void access$7(com.aviary.android.feather.widget.CropImageView,float) -> a
    void access$8$3955ce(com.aviary.android.feather.widget.CropImageView,float,float,float) -> a
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector access$9(com.aviary.android.feather.widget.CropImageView) -> f
    void access$10(com.aviary.android.feather.widget.CropImageView,com.aviary.android.feather.widget.HighlightView) -> b
    void access$11$210a10b0(com.aviary.android.feather.widget.CropImageView,float,float) -> a
    float access$12(com.aviary.android.feather.widget.CropImageView) -> g
    void access$13(com.aviary.android.feather.widget.CropImageView,float,float,float) -> b
    void access$14$65cb8ff5(com.aviary.android.feather.widget.CropImageView) -> h
com.aviary.android.feather.widget.CropImageView$CropGestureListener -> com.aviary.android.feather.widget.ao:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.aviary.android.feather.widget.CropImageView$CropScaleListener -> com.aviary.android.feather.widget.aw:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    boolean onScaleBegin(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> b
    void onScaleEnd(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> c
    boolean onScale(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> a
com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener -> com.aviary.android.feather.widget.by:
    void onSingleTapUpConfirmed() -> u
com.aviary.android.feather.widget.DrawableHighlightView -> com.aviary.android.feather.widget.bx:
    com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener mDeleteClickListener -> a
    boolean mHidden -> b
    android.view.View mContext -> c
    com.aviary.android.feather.widget.DrawableHighlightView$Mode mMode -> d
    boolean mSelected -> e
    android.graphics.RectF mDrawRect -> f
    android.graphics.RectF mCropRect -> g
    android.graphics.Matrix mMatrix -> h
    com.aviary.android.feather.library.graphics.drawable.FeatherDrawable mContent -> i
    android.graphics.drawable.Drawable mAnchorRotate -> j
    android.graphics.drawable.Drawable mAnchorDelete -> k
    int mAnchorWidth -> l
    int mAnchorHeight -> m
    int mOutlineStrokeColor -> n
    int mOutlineStrokeColorPressed -> o
    boolean mRotateAndScale -> p
    boolean mShowDeleteButton -> q
    float mRotation -> r
    float mRatio -> s
    float mMinWidth -> t
    float mMinHeight -> u
    android.graphics.Matrix mRotateMatrix -> v
    float[] fpoints -> w
    boolean mDrawOutlineStroke -> x
    boolean mDrawOutlineFill -> y
    android.graphics.Paint mOutlineStrokePaint -> z
    android.graphics.Paint mOutlineFillPaint -> A
    int mOutlineFillColorNormal -> B
    int mOutlineFillColorPressed -> C
    int mOutlineEllipse -> D
    int mPadding -> E
    boolean mShowAnchors -> F
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV mAlignVerticalMode -> G
    android.graphics.Path mOutlinePath -> H
    void setAlignModeV(com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV) -> a
    void dispose() -> a
    void draw(android.graphics.Canvas) -> a
    void showAnchors$1385ff() -> b
    android.graphics.RectF getCropRectF() -> c
    android.graphics.Matrix getCropRotationMatrix() -> d
    android.graphics.RectF getDisplayRect(android.graphics.Matrix,android.graphics.RectF) -> a
    android.graphics.RectF getDrawRect() -> e
    int getHit(float,float) -> a
    void onSingleTapConfirmed(float,float) -> b
    android.graphics.Rect getInvalidationRect() -> q
    android.graphics.Matrix getMatrix() -> f
    com.aviary.android.feather.widget.DrawableHighlightView$Mode getMode() -> g
    boolean getSelected() -> h
    void growBy(float) -> b
    void growBy(float,float,boolean) -> a
    void onMouseMove(int,android.view.MotionEvent,float,float) -> a
    void invalidate() -> i
    void setHidden$1385ff() -> j
    void setMinSize(float) -> a
    void setMode(com.aviary.android.feather.widget.DrawableHighlightView$Mode) -> a
    void setOnDeleteClickListener(com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener) -> a
    void setRotateAndScale$1385ff() -> k
    void showDelete$1385ff() -> l
    void setSelected(boolean) -> a
    void setup$7394fbf1(android.graphics.Matrix,android.graphics.RectF) -> b
    void drawOutlineStroke(boolean) -> b
    void drawOutlineFill(boolean) -> c
    android.graphics.Paint getOutlineStrokePaint() -> m
    android.graphics.Paint getOutlineFillPaint() -> n
    void setOutlineFillColor(int) -> a
    void setOutlineFillColorPressed(int) -> b
    void setOutlineEllipse(int) -> c
    void setOutlineStrokeColor(int) -> d
    void setOutlineStrokeColorPressed(int) -> e
    com.aviary.android.feather.library.graphics.drawable.FeatherDrawable getContent() -> o
    void updateRatio() -> r
    void forceUpdate() -> p
    void setPadding(int) -> f
com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV -> com.aviary.android.feather.widget.av:
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Top -> a
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Bottom -> b
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Center -> c
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV[] ENUM$VALUES -> d
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV[] values() -> values
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.DrawableHighlightView$Mode -> com.aviary.android.feather.widget.bo:
    com.aviary.android.feather.widget.DrawableHighlightView$Mode None -> a
    com.aviary.android.feather.widget.DrawableHighlightView$Mode Move -> b
    com.aviary.android.feather.widget.DrawableHighlightView$Mode Grow -> c
    com.aviary.android.feather.widget.DrawableHighlightView$Mode Rotate -> d
    com.aviary.android.feather.widget.DrawableHighlightView$Mode[] ENUM$VALUES -> e
    com.aviary.android.feather.widget.DrawableHighlightView$Mode[] values() -> values
    com.aviary.android.feather.widget.DrawableHighlightView$Mode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener -> com.aviary.android.feather.widget.au:
    void onDeleteClick() -> a
com.aviary.android.feather.widget.Gallery -> com.aviary.android.feather.widget.Gallery:
    android.os.Vibrator mVibrator -> a
    android.os.Handler mVibrationHandler -> A
    boolean mAutoSelectChild -> B
    com.aviary.android.feather.widget.Gallery$OnItemsScrollListener mItemsScrollListener -> C
    int mSpacing -> D
    int mAnimationDuration -> E
    float mUnselectedAlpha -> F
    int mLeftMost -> G
    int mRightMost -> H
    int mGravity -> I
    android.view.GestureDetector mGestureDetector -> J
    int mDownTouchPosition -> K
    android.view.View mDownTouchView -> L
    com.aviary.android.feather.widget.Gallery$FlingRunnable mFlingRunnable -> M
    boolean mAutoScrollToCenter -> N
    int mTouchSlop -> O
    java.lang.Runnable mDisableSuppressSelectionChangedRunnable -> P
    boolean mShouldStopFling -> Q
    android.view.View mSelectedChild -> R
    boolean mShouldCallbackDuringFling -> S
    boolean mShouldCallbackOnUnselectedItemClick -> T
    boolean mSuppressSelectionChanged -> U
    boolean mReceivedInvokeKeyDown -> V
    com.aviary.android.feather.widget.AdapterView$AdapterContextMenuInfo mContextMenuInfo -> W
    boolean mIsFirstScroll -> Z
    boolean mIsRtl -> aa
    int mLastMotionValue -> ab
    boolean isDown -> ac
    com.aviary.android.feather.widget.Gallery$ScrollSelectionNotifier mScrollSelectionNotifier -> ad
    void setOnItemsScrollListener(com.aviary.android.feather.widget.Gallery$OnItemsScrollListener) -> a
    void setCallbackDuringFling$1385ff() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setSpacing$13462e() -> b
    boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation) -> getChildStaticTransformation
    int computeHorizontalScrollExtent() -> computeHorizontalScrollExtent
    int computeHorizontalScrollOffset() -> computeHorizontalScrollOffset
    int computeHorizontalScrollRange() -> computeHorizontalScrollRange
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getChildHeight(android.view.View) -> a
    void trackMotionScroll(int) -> a
    void onOverScrolled(int,int,boolean,boolean) -> onOverScrolled
    int getCenterOfGallery() -> o
    int getCenterOfView(android.view.View) -> d
    void scrollIntoSlots() -> p
    void onFinishedMovement() -> q
    void selectionChanged() -> c
    void layout$2563266() -> d
    void fillToGalleryLeft() -> r
    void fillToGalleryRight() -> s
    android.view.View makeAndAddView(int,int,int,boolean) -> a
    void setUpChild(android.view.View,int,int,boolean) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onDown(android.view.MotionEvent) -> onDown
    void onUp() -> t
    void onLongPress(android.view.MotionEvent) -> onLongPress
    void onShowPress(android.view.MotionEvent) -> onShowPress
    void dispatchUnpress() -> u
    void dispatchSetSelected(boolean) -> dispatchSetSelected
    void dispatchSetPressed(boolean) -> dispatchSetPressed
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    boolean showContextMenuForChild(android.view.View) -> showContextMenuForChild
    boolean showContextMenu() -> showContextMenu
    boolean dispatchLongPress(android.view.View,int,long) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean scrollToChild(int) -> f
    void setSelectedPositionInt(int) -> b
    void updateSelectedItemMetadata() -> v
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    void fireOnScrollCompleted() -> w
    void access$0$58ef2ba8(com.aviary.android.feather.widget.Gallery) -> a
    void access$1(com.aviary.android.feather.widget.Gallery) -> b
    int access$2(com.aviary.android.feather.widget.Gallery) -> c
    void access$3(com.aviary.android.feather.widget.Gallery) -> d
    void access$4$58ef2ba8(com.aviary.android.feather.widget.Gallery) -> e
    boolean access$5(com.aviary.android.feather.widget.Gallery) -> f
    void access$6(com.aviary.android.feather.widget.Gallery,int) -> a
    boolean access$7(com.aviary.android.feather.widget.Gallery) -> g
    void access$8(com.aviary.android.feather.widget.Gallery) -> h
com.aviary.android.feather.widget.Gallery$1 -> com.aviary.android.feather.widget.x:
    com.aviary.android.feather.widget.Gallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.Gallery$2 -> com.aviary.android.feather.widget.v:
    com.aviary.android.feather.widget.Gallery this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.widget.Gallery$3 -> com.aviary.android.feather.widget.u:
    com.aviary.android.feather.widget.Gallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.Gallery$Fling8Runnable -> com.aviary.android.feather.widget.bp:
    android.widget.Scroller mScroller -> a
    com.aviary.android.feather.widget.Gallery this$0 -> b
    void _startUsingVelocity(int,int) -> a
    void _startScroll(int) -> a
    boolean computeScrollOffset() -> d
    int getCurrX() -> e
    void _endFling() -> a
    boolean isFinished() -> b
com.aviary.android.feather.widget.Gallery$Fling9Runnable -> com.aviary.android.feather.widget.as:
    android.widget.OverScroller mScroller -> a
    com.aviary.android.feather.widget.Gallery this$0 -> b
    void _startUsingVelocity(int,int) -> a
    void _startScroll(int) -> a
    boolean computeScrollOffset() -> d
    int getCurrX() -> e
    void _endFling() -> a
    boolean isFinished() -> b
com.aviary.android.feather.widget.Gallery$FlingRunnable -> com.aviary.android.feather.widget.ah:
    int mLastFlingX -> a
    com.aviary.android.feather.widget.Gallery this$0 -> b
    void startCommon() -> f
    void _startUsingVelocity(int,int) -> a
    void _startScroll(int) -> a
    void _endFling() -> a
    boolean isFinished() -> b
    void startUsingVelocity(int) -> b
    void startUsingDistance(int) -> c
    void stop$1385ff() -> c
    void endFling(boolean) -> a
    boolean computeScrollOffset() -> d
    int getCurrX() -> e
    void run() -> run
    void access$0$55925503(com.aviary.android.feather.widget.Gallery$FlingRunnable) -> a
com.aviary.android.feather.widget.Gallery$LayoutParams -> com.aviary.android.feather.widget.Gallery$LayoutParams:
com.aviary.android.feather.widget.Gallery$OnItemsScrollListener -> com.aviary.android.feather.widget.a:
    void onScrollStarted$638b789(int) -> a
    void onScroll$638b789(com.aviary.android.feather.widget.AdapterView,int) -> a
    void onScrollFinished$638b789(com.aviary.android.feather.widget.AdapterView,android.view.View,int) -> a
com.aviary.android.feather.widget.Gallery$ScrollSelectionNotifier -> com.aviary.android.feather.widget.bk:
    com.aviary.android.feather.widget.Gallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.HighlightView -> com.aviary.android.feather.widget.bi:
    boolean mHidden -> a
    android.view.View mContext -> b
    int mMinSize -> c
    com.aviary.android.feather.widget.HighlightView$Mode mMode -> d
    android.graphics.Rect mDrawRect -> e
    android.graphics.RectF mImageRect -> f
    android.graphics.RectF mCropRect -> g
    android.graphics.Matrix mMatrix -> h
    boolean mMaintainAspectRatio -> i
    float mInitialAspectRatio -> j
    android.graphics.drawable.Drawable mResizeDrawable -> k
    android.graphics.Paint mOutlinePaint -> l
    android.graphics.Paint mOutlinePaint2 -> m
    android.graphics.Paint mOutlineFill -> n
    int highlight_color -> o
    int highlight_down_color -> p
    int highlight_outside_color -> q
    int highlight_outside_color_down -> r
    int stroke_width -> s
    int internal_stroke_width -> t
    int internal_stroke_alpha -> u
    int internal_stroke_alpha_down -> v
    int dWidth -> w
    int dHeight -> x
    android.graphics.Rect mViewDrawingRect -> y
    android.graphics.Path mPath -> z
    android.graphics.Path mLinesPath -> A
    android.graphics.Path mInversePath -> B
    float hysteresis -> C
    void dispose() -> a
    void setMinSize(int) -> a
    void draw(android.graphics.Canvas) -> a
    void setMode(com.aviary.android.feather.widget.HighlightView$Mode) -> a
    void handleMotion(int,float,float) -> a
    android.graphics.Rect computeLayout(boolean) -> a
    android.graphics.Rect getDisplayRect(android.graphics.Matrix,android.graphics.RectF) -> a
    void invalidate() -> b
    void setup(android.graphics.Matrix,android.graphics.Rect,android.graphics.RectF,boolean) -> a
    android.graphics.Matrix getMatrix() -> c
    android.graphics.Rect getDrawRect() -> d
    android.graphics.RectF getCropRectF() -> e
    android.graphics.Rect getCropRect() -> f
com.aviary.android.feather.widget.HighlightView$Mode -> com.aviary.android.feather.widget.l:
    com.aviary.android.feather.widget.HighlightView$Mode None -> a
    com.aviary.android.feather.widget.HighlightView$Mode Move -> b
    com.aviary.android.feather.widget.HighlightView$Mode Grow -> c
    com.aviary.android.feather.widget.HighlightView$Mode[] ENUM$VALUES -> d
    com.aviary.android.feather.widget.HighlightView$Mode[] values() -> values
    com.aviary.android.feather.widget.HighlightView$Mode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.HorizontialFixedListView -> com.aviary.android.feather.widget.HorizontialFixedListView:
    boolean mAlwaysOverrideTouch -> g
    android.widget.ListAdapter mAdapter -> a
    int mLeftViewIndex -> h
    int mRightViewIndex -> i
    android.view.GestureDetector mGesture -> j
    java.util.Queue mRemovedViewQueue -> k
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelected -> l
    android.widget.AdapterView$OnItemClickListener mOnItemClicked -> m
    boolean mDataChanged -> n
    com.aviary.android.feather.widget.HorizontialFixedListView$IFlingRunnable mFlingRunnable -> o
    boolean mForceLayout -> p
    android.database.DataSetObserver mDataObserver -> q
    int mHeightMeasureSpec -> r
    int mWidthMeasureSpec -> s
    boolean mIsFirstScroll -> t
    int mRightEdge -> u
    int mLeftEdge -> v
    int mAnimationDuration -> b
    int mMaxX -> c
    int mMinX -> d
    int mChildWidth -> w
    int mChildHeight -> x
    boolean mShouldStopFling -> e
    boolean mToLeft -> y
    int mCurrentX -> f
    int mOldX -> z
    int mTouchSlop -> A
    android.view.GestureDetector$OnGestureListener mGestureListener -> B
    void initView() -> b
    void trackMotionScroll(int) -> a
    void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    android.widget.ListAdapter getAdapter() -> a
    android.view.View getSelectedView() -> getSelectedView
    void setAdapter(android.widget.ListAdapter) -> a
    void reset() -> c
    void setSelection(int) -> setSelection
    void onMeasure(int,int) -> onMeasure
    void addAndMeasureChild(android.view.View,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void fillListLeft(int,int) -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void scrollIntoSlots() -> d
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.widget.Adapter getAdapter() -> getAdapter
    void access$2$56fa69c2(com.aviary.android.feather.widget.HorizontialFixedListView) -> a
    void access$3$56fa69c2(com.aviary.android.feather.widget.HorizontialFixedListView) -> b
    void access$4(com.aviary.android.feather.widget.HorizontialFixedListView) -> c
    com.aviary.android.feather.widget.HorizontialFixedListView$IFlingRunnable access$5(com.aviary.android.feather.widget.HorizontialFixedListView) -> d
    android.widget.AdapterView$OnItemClickListener access$6(com.aviary.android.feather.widget.HorizontialFixedListView) -> e
    int access$7(com.aviary.android.feather.widget.HorizontialFixedListView) -> f
    android.widget.AdapterView$OnItemSelectedListener access$8(com.aviary.android.feather.widget.HorizontialFixedListView) -> g
    void access$9(com.aviary.android.feather.widget.HorizontialFixedListView) -> h
com.aviary.android.feather.widget.HorizontialFixedListView$1 -> com.aviary.android.feather.widget.ba:
    com.aviary.android.feather.widget.HorizontialFixedListView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.HorizontialFixedListView$2 -> com.aviary.android.feather.widget.bb:
    com.aviary.android.feather.widget.HorizontialFixedListView this$0 -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
com.aviary.android.feather.widget.HorizontialFixedListView$Fling8Runnable -> com.aviary.android.feather.widget.ad:
    android.widget.Scroller mScroller -> a
    com.aviary.android.feather.widget.HorizontialFixedListView this$0 -> b
    boolean isFinished() -> e
    void _startUsingVelocity(int,int) -> c
    void _startUsingDistance(int,int) -> d
    void forceFinished$1385ff() -> d
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
com.aviary.android.feather.widget.HorizontialFixedListView$Fling9Runnable -> com.aviary.android.feather.widget.bh:
    android.widget.OverScroller mScroller -> a
    com.aviary.android.feather.widget.HorizontialFixedListView this$0 -> b
    boolean isFinished() -> e
    void _startUsingVelocity(int,int) -> c
    void _startUsingDistance(int,int) -> d
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
    void forceFinished$1385ff() -> d
com.aviary.android.feather.widget.HorizontialFixedListView$IFlingRunnable -> com.aviary.android.feather.widget.d:
    int mLastFlingX -> a
    com.aviary.android.feather.widget.HorizontialFixedListView this$0 -> b
    void startCommon() -> f
    void stop$1385ff() -> a
    void startUsingDistance(int,int) -> a
    void startUsingVelocity(int,int) -> b
    void endFling(boolean) -> a
    void run() -> run
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
    void forceFinished$1385ff() -> d
    void _startUsingVelocity(int,int) -> c
    void _startUsingDistance(int,int) -> d
    boolean isFinished() -> e
com.aviary.android.feather.widget.HorizontialListView -> com.aviary.android.feather.widget.HorizontialListView:
    boolean mAlwaysOverrideTouch -> d
    android.widget.ListAdapter mAdapter -> a
    int mLeftViewIndex -> e
    int mRightViewIndex -> f
    int mCurrentX -> g
    int mNextX -> b
    int mMaxX -> h
    int mDisplayOffset -> i
    android.widget.Scroller mScroller -> j
    android.view.GestureDetector mGesture -> k
    java.util.Queue mRemovedViewQueue -> l
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelected -> m
    android.widget.AdapterView$OnItemClickListener mOnItemClicked -> n
    boolean mDataChanged -> o
    android.database.DataSetObserver mDataObserver -> p
    int mHeightMeasureSpec -> q
    int mWidthMeasureSpec -> r
    boolean mScrollerRunning -> c
    android.view.GestureDetector$OnGestureListener mOnGesture -> s
    void initView() -> b
    void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    android.view.View getSelectedView() -> getSelectedView
    void reset() -> c
    void setSelection(int) -> setSelection
    void onMeasure(int,int) -> onMeasure
    void addAndMeasureChild(android.view.View,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean onFling$503634dd(float) -> a
    boolean onDown$53fcfd4e() -> a
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.widget.Adapter getAdapter() -> getAdapter
    void access$2$3d698e54(com.aviary.android.feather.widget.HorizontialListView) -> a
    void access$3(com.aviary.android.feather.widget.HorizontialListView) -> b
    android.widget.AdapterView$OnItemClickListener access$4(com.aviary.android.feather.widget.HorizontialListView) -> c
    int access$5(com.aviary.android.feather.widget.HorizontialListView) -> d
    android.widget.AdapterView$OnItemSelectedListener access$6(com.aviary.android.feather.widget.HorizontialListView) -> e
com.aviary.android.feather.widget.HorizontialListView$1 -> com.aviary.android.feather.widget.am:
    com.aviary.android.feather.widget.HorizontialListView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.HorizontialListView$2 -> com.aviary.android.feather.widget.ak:
    com.aviary.android.feather.widget.HorizontialListView this$0 -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
com.aviary.android.feather.widget.HorizontialListView$3 -> com.aviary.android.feather.widget.al:
    com.aviary.android.feather.widget.HorizontialListView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.IToast -> com.aviary.android.feather.widget.bu:
    java.lang.String LOG_TAG -> h
    android.content.Context mContext -> i
    android.view.WindowManager mWindowManager -> j
    android.view.View mNextView -> a
    android.view.View mView -> b
    int mDuration -> k
    int mGravity -> c
    int mX -> d
    int mY -> e
    com.aviary.android.feather.widget.IToast$TN mTN -> l
    float mHorizontalMargin -> f
    float mVerticalMargin -> g
    android.os.Handler mHandler -> m
    void setView(android.view.View) -> a
    android.view.View getView() -> a
    void show() -> b
    void hide() -> c
    com.aviary.android.feather.widget.IToast make$5e2c3605(android.content.Context) -> a
com.aviary.android.feather.widget.IToast$TN -> com.aviary.android.feather.widget.bn:
    java.lang.Runnable mShow -> a
    java.lang.Runnable mHide -> b
    android.view.WindowManager$LayoutParams mParams -> c
    android.view.WindowManager mWm -> d
    com.aviary.android.feather.widget.IToast this$0 -> e
    void handleHide() -> a
com.aviary.android.feather.widget.IToast$TN$1 -> com.aviary.android.feather.widget.bc:
    com.aviary.android.feather.widget.IToast$TN this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.IToast$TN$2 -> com.aviary.android.feather.widget.ay:
    com.aviary.android.feather.widget.IToast$TN this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.ImageButtonRadioButton -> com.aviary.android.feather.widget.ImageButtonRadioButton:
    com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener mOnCheckedChangeListener -> a
    com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener mOnCheckedChangeWidgetListener -> b
    boolean mChecked -> c
    boolean mBroadcasting -> d
    android.widget.ImageButton mImageView -> e
    android.widget.TextView mTextView -> f
    int mButtonLabel -> g
    int mButtonIcon -> h
    boolean mTempChecked -> i
    void onFinishInflate() -> onFinishInflate
    void setButton(int) -> a
    void setOnCheckedChangeWidgetListener(com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener) -> a
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    void toggle() -> toggle
    boolean performClick() -> performClick
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener -> com.aviary.android.feather.widget.aj:
    void onCheckedChanged(com.aviary.android.feather.widget.ImageButtonRadioButton,boolean) -> a
com.aviary.android.feather.widget.ImageButtonRadioGroup -> com.aviary.android.feather.widget.ImageButtonRadioGroup:
    int mCheckedId -> a
    int mFirstButton -> b
    int mCenterButton -> c
    int mLastButton -> d
    com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener mChildOnCheckedChangeListener -> e
    boolean mProtectFromCheckedChange -> f
    com.aviary.android.feather.widget.ImageButtonRadioGroup$OnCheckedChangeListener mOnCheckedChangeListener -> g
    com.aviary.android.feather.widget.ImageButtonRadioGroup$PassThroughHierarchyChangeListener mPassThroughListener -> h
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener) -> setOnHierarchyChangeListener
    void onFinishInflate() -> onFinishInflate
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void setCheckedId(int,boolean) -> a
    void setCheckedStateForView(int,boolean) -> b
    void setOnCheckedChangeListener(com.aviary.android.feather.widget.ImageButtonRadioGroup$OnCheckedChangeListener) -> a
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean access$1(com.aviary.android.feather.widget.ImageButtonRadioGroup) -> a
    void access$2(com.aviary.android.feather.widget.ImageButtonRadioGroup,boolean) -> a
    int access$3(com.aviary.android.feather.widget.ImageButtonRadioGroup) -> b
    void access$4$3d81667e(com.aviary.android.feather.widget.ImageButtonRadioGroup,int) -> a
    void access$5(com.aviary.android.feather.widget.ImageButtonRadioGroup,int,boolean) -> a
    com.aviary.android.feather.widget.ImageButtonRadioButton$OnCheckedChangeListener access$6(com.aviary.android.feather.widget.ImageButtonRadioGroup) -> c
com.aviary.android.feather.widget.ImageButtonRadioGroup$CheckedStateTracker -> com.aviary.android.feather.widget.bf:
    com.aviary.android.feather.widget.ImageButtonRadioGroup this$0 -> a
    void onCheckedChanged(com.aviary.android.feather.widget.ImageButtonRadioButton,boolean) -> a
com.aviary.android.feather.widget.ImageButtonRadioGroup$LayoutParams -> com.aviary.android.feather.widget.ImageButtonRadioGroup$LayoutParams:
    void setBaseAttributes(android.content.res.TypedArray,int,int) -> setBaseAttributes
com.aviary.android.feather.widget.ImageButtonRadioGroup$OnCheckedChangeListener -> com.aviary.android.feather.widget.bw:
    void onCheckedChanged$3d81667e(int,boolean) -> a
com.aviary.android.feather.widget.ImageButtonRadioGroup$PassThroughHierarchyChangeListener -> com.aviary.android.feather.widget.bl:
    android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener -> a
    com.aviary.android.feather.widget.ImageButtonRadioGroup this$0 -> b
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    void access$1(com.aviary.android.feather.widget.ImageButtonRadioGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener) -> a
com.aviary.android.feather.widget.ImageSwitcher -> com.aviary.android.feather.widget.ImageSwitcher:
    boolean mSwitchEnabled -> a
    void setImageBitmap$225de6bf(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void setImageDrawable$27247d01(android.graphics.drawable.Drawable) -> a
    void setSwitchEnabled(boolean) -> a
com.aviary.android.feather.widget.ImageViewDrawableOverlay -> com.aviary.android.feather.widget.ImageViewDrawableOverlay:
    int mMotionEdge -> n
    java.util.List mOverlayViews -> o
    com.aviary.android.feather.widget.DrawableHighlightView mOverlayView -> p
    com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener mDrawableListener -> q
    boolean mForceSingleSelection -> r
    void init() -> a
    void setForceSingleSelection$1385ff() -> c
    android.view.GestureDetector$OnGestureListener getGestureListener() -> b
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector$OnScaleGestureListener getScaleListener() -> d
    void setOnDrawableEventListener(com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener) -> a
    void setImageBitmap(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean addHighlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    int getHighlightCount() -> e
    com.aviary.android.feather.widget.DrawableHighlightView getHighlightViewAt$33fb5896() -> f
    boolean removeHightlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    com.aviary.android.feather.widget.DrawableHighlightView getSelectedHighlightView() -> g
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    float onDoubleTapPost(float,float) -> b
    void setSelectedHighlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    com.aviary.android.feather.widget.DrawableHighlightView access$0(com.aviary.android.feather.widget.ImageViewDrawableOverlay,android.view.MotionEvent) -> a
    java.util.List access$1(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> a
    boolean access$2(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> b
    com.aviary.android.feather.widget.DrawableHighlightView access$3(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> c
    void access$4(com.aviary.android.feather.widget.ImageViewDrawableOverlay,int) -> a
    com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener access$5(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> d
    com.aviary.android.feather.widget.DrawableHighlightView access$6(com.aviary.android.feather.widget.ImageViewDrawableOverlay,android.view.MotionEvent) -> b
    boolean access$7(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> e
    void access$8(com.aviary.android.feather.widget.ImageViewDrawableOverlay,float) -> a
    void access$9$67e5f2c0(com.aviary.android.feather.widget.ImageViewDrawableOverlay,float,float,float) -> a
    boolean access$10(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> f
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector access$11(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> g
    int access$12(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> h
    void access$13(com.aviary.android.feather.widget.ImageViewDrawableOverlay,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void access$14$7042f282(com.aviary.android.feather.widget.ImageViewDrawableOverlay,float,float) -> a
    boolean access$15(com.aviary.android.feather.widget.ImageViewDrawableOverlay) -> i
com.aviary.android.feather.widget.ImageViewDrawableOverlay$CropGestureListener -> com.aviary.android.feather.widget.y:
    com.aviary.android.feather.widget.ImageViewDrawableOverlay this$0 -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.aviary.android.feather.widget.ImageViewDrawableOverlay$CropScaleListener -> com.aviary.android.feather.widget.q:
    com.aviary.android.feather.widget.ImageViewDrawableOverlay this$0 -> a
    boolean onScaleBegin(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> b
    void onScaleEnd(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> c
    boolean onScale(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> a
com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener -> com.aviary.android.feather.widget.af:
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> a
com.aviary.android.feather.widget.ImageViewSpotDraw -> com.aviary.android.feather.widget.ImageViewSpotDraw:
    android.graphics.Paint mPaint -> n
    float mCurrentScale -> o
    float mBrushSize -> p
    android.graphics.Path tmpPath -> q
    android.graphics.Canvas mCanvas -> r
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode mTouchMode -> s
    float mX -> t
    float mY -> u
    android.graphics.Matrix mIdentityMatrix -> v
    android.graphics.Matrix mInvertedMatrix -> w
    com.aviary.android.feather.library.graphics.FlattenPath mFlattenPath -> x
    com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener mDrawListener -> y
    boolean mMoved -> z
    void setOnDrawStartListener(com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener) -> a
    void init() -> a
    void setBrushSize(float) -> a
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode getDrawMode() -> c
    void setDrawMode(com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode) -> a
    void onDrawModeChanged() -> e
    void onDraw(android.graphics.Canvas) -> onDraw
    void onBitmapChanged(android.graphics.drawable.Drawable) -> a
    float[] getMatrixValues(android.graphics.Matrix) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener -> com.aviary.android.feather.widget.ap:
    void onDrawStart(float[],int) -> a
    void onDrawing$49651d03(float[]) -> a
    void onDrawEnd() -> d_
com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode -> com.aviary.android.feather.widget.z:
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode IMAGE -> a
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode DRAW -> b
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode[] values() -> values
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.ImageViewTouchAndDraw -> com.aviary.android.feather.widget.ImageViewTouchAndDraw:
    android.graphics.Paint mPaint -> n
    android.graphics.Path tmpPath -> o
    android.graphics.Canvas mCanvas -> p
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode mTouchMode -> q
    float mX -> r
    float mY -> s
    android.graphics.Matrix mIdentityMatrix -> t
    android.graphics.Matrix mInvertedMatrix -> u
    android.graphics.Bitmap mCopy -> v
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener mDrawListener -> w
    void setOnDrawStartListener(com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener) -> a
    void init() -> a
    void setDrawMode(com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode) -> a
    void onDrawModeChanged() -> c
    void setPaint(android.graphics.Paint) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void commit(android.graphics.Canvas) -> a
    void onBitmapChanged(android.graphics.drawable.Drawable) -> a
    float[] getMatrixValues(android.graphics.Matrix) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener -> com.aviary.android.feather.widget.at:
    void onDrawStart() -> b_
com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode -> com.aviary.android.feather.widget.an:
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode IMAGE -> a
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode DRAW -> b
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode[] values() -> values
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.ImageViewTouchBrush -> com.aviary.android.feather.widget.ImageViewTouchBrush:
    com.aviary.android.feather.widget.BrushHighlight mBrushHighlight -> n
    float mBrushEndSize -> o
    long mBrushDuration -> p
    void init() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    android.view.GestureDetector$OnGestureListener getGestureListener() -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void access$0(com.aviary.android.feather.widget.ImageViewTouchBrush,float,float) -> a
com.aviary.android.feather.widget.ImageViewTouchBrush$GestureListenerNoDoubleTap -> com.aviary.android.feather.widget.ac:
    com.aviary.android.feather.widget.ImageViewTouchBrush this$0 -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
com.aviary.android.feather.widget.ToolbarView -> com.aviary.android.feather.widget.ToolbarView:
    android.widget.Button mApplyButton -> a
    android.widget.Button mSaveButton -> b
    android.widget.TextSwitcher mTitleText -> c
    android.view.View mAviaryLogo -> d
    boolean isAnimating -> e
    com.aviary.android.feather.widget.ToolbarView$STATE mCurrentState -> f
    android.view.animation.Animation mOutAnimation -> g
    android.view.animation.Animation mInAnimation -> h
    com.aviary.android.feather.widget.ToolbarView$OnToolbarClickListener mListener -> i
    android.graphics.Typeface mTypeFace -> j
    boolean mClickable -> k
    android.os.Handler mHandler -> l
    android.view.animation.Animation$AnimationListener mInAnimationListener -> m
    void setClickable(boolean) -> setClickable
    boolean isClickable() -> isClickable
    long getInAnimationTime() -> a
    void onFinishInflate() -> onFinishInflate
    void setState(com.aviary.android.feather.widget.ToolbarView$STATE,boolean) -> a
    void setOnToolbarClickListener(com.aviary.android.feather.widget.ToolbarView$OnToolbarClickListener) -> a
    void setSaveEnabled(boolean) -> setSaveEnabled
    void setTitle(java.lang.CharSequence) -> a
    void setTitle(int) -> a
    android.view.View makeView() -> makeView
    void access$0(com.aviary.android.feather.widget.ToolbarView,boolean) -> a
    android.os.Handler access$1(com.aviary.android.feather.widget.ToolbarView) -> a
    com.aviary.android.feather.widget.ToolbarView$OnToolbarClickListener access$2(com.aviary.android.feather.widget.ToolbarView) -> b
    com.aviary.android.feather.widget.ToolbarView$STATE access$3(com.aviary.android.feather.widget.ToolbarView) -> c
com.aviary.android.feather.widget.ToolbarView$1 -> com.aviary.android.feather.widget.s:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.widget.ToolbarView$2 -> com.aviary.android.feather.widget.o:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.ToolbarView$2$1 -> com.aviary.android.feather.widget.bd:
    com.aviary.android.feather.widget.ToolbarView$2 this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.ToolbarView$3 -> com.aviary.android.feather.widget.n:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.ToolbarView$4 -> com.aviary.android.feather.widget.r:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.ToolbarView$5 -> com.aviary.android.feather.widget.p:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.ToolbarView$6 -> com.aviary.android.feather.widget.e:
    com.aviary.android.feather.widget.ToolbarView this$0 -> a
    boolean val$showMiddle -> b
    int[] $SWITCH_TABLE$com$aviary$android$feather$widget$ToolbarView$STATE -> c
    void run() -> run
    int[] $SWITCH_TABLE$com$aviary$android$feather$widget$ToolbarView$STATE() -> a
com.aviary.android.feather.widget.ToolbarView$OnToolbarClickListener -> com.aviary.android.feather.widget.t:
    void onSaveClick() -> a
    void onApplyClick() -> b
com.aviary.android.feather.widget.ToolbarView$STATE -> com.aviary.android.feather.widget.m:
    com.aviary.android.feather.widget.ToolbarView$STATE STATE_SAVE -> a
    com.aviary.android.feather.widget.ToolbarView$STATE STATE_APPLY -> b
    com.aviary.android.feather.widget.ToolbarView$STATE[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.ToolbarView$STATE[] values() -> values
    com.aviary.android.feather.widget.ToolbarView$STATE valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.Wheel -> com.aviary.android.feather.widget.Wheel:
    java.lang.String LOG_TAG -> a
    int mPaddingLeft -> g
    int mPaddingRight -> h
    int mPaddingTop -> i
    int mPaddingBottom -> j
    int mWidth -> k
    int mHeight -> l
    boolean mInLayout -> m
    int mMaxX -> b
    int mMinX -> c
    com.aviary.android.feather.widget.Wheel$OnScrollListener mScrollListener -> n
    android.graphics.Paint mPaint -> o
    android.graphics.Shader mShader3 -> d
    android.graphics.Bitmap mTickBitmap -> p
    android.graphics.Bitmap mIndicator -> q
    android.graphics.DrawFilter mFast -> r
    android.graphics.DrawFilter mDF -> s
    android.view.GestureDetector mGestureDetector -> t
    boolean mIsFirstScroll -> u
    com.aviary.android.feather.widget.Wheel$IFlingRunnable mFlingRunnable -> v
    int mAnimationDuration -> e
    boolean mToLeft -> w
    int mTouchSlop -> x
    float mIndicatorX -> y
    int mOriginalX -> z
    int mOriginalDeltaX -> A
    float mTickSpace -> B
    int mWheelSizeFactor -> C
    int mTicksCount -> D
    float mTicksSize -> E
    android.os.Vibrator mVibrator -> f
    android.os.Handler mVibrationHandler -> F
    boolean mShouldStopFling -> G
    it.sephiroth.android.library.imagezoom.easing.Easing mTicksEasing -> H
    android.graphics.Matrix mDrawMatrix -> I
    boolean mForceLayout -> J
    float mLastMotionValue -> K
    com.aviary.android.feather.widget.Wheel$ScrollSelectionNotifier mScrollSelectionNotifier -> L
    void setOnScrollListener(com.aviary.android.feather.widget.Wheel$OnScrollListener) -> a
    void setPadding(int,int,int,int) -> setPadding
    void setBackgroundColor(int) -> setBackgroundColor
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setBackgroundResource(int) -> setBackgroundResource
    void onDraw(android.graphics.Canvas) -> onDraw
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setWheelScaleFactor$13462e() -> a
    int getWheelScaleFactor() -> b
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void trackMotionScroll(int) -> a
    void scrollIntoSlots() -> e
    float getValue() -> f
    int getTickValue() -> g
    int getTicksCount() -> c
    int getTicks() -> d
    void fireOnScrollCompleted() -> h
    void access$0(com.aviary.android.feather.widget.Wheel) -> a
    void access$1(com.aviary.android.feather.widget.Wheel) -> b
    void access$2$3525cdb1(com.aviary.android.feather.widget.Wheel) -> c
    boolean access$3(com.aviary.android.feather.widget.Wheel) -> d
com.aviary.android.feather.widget.Wheel$1 -> com.aviary.android.feather.widget.b:
    com.aviary.android.feather.widget.Wheel this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.widget.Wheel$Fling8Runnable -> com.aviary.android.feather.widget.aq:
    android.widget.Scroller mScroller -> a
    com.aviary.android.feather.widget.Wheel this$0 -> b
    boolean isFinished() -> a
    void _startUsingVelocity(int,int) -> a
    void _startUsingDistance(int,int) -> b
    void forceFinished$1385ff() -> d
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
com.aviary.android.feather.widget.Wheel$Fling9Runnable -> com.aviary.android.feather.widget.w:
    android.widget.OverScroller mScroller -> a
    com.aviary.android.feather.widget.Wheel this$0 -> b
    boolean isFinished() -> a
    void _startUsingVelocity(int,int) -> a
    void _startUsingDistance(int,int) -> b
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
    void forceFinished$1385ff() -> d
com.aviary.android.feather.widget.Wheel$IFlingRunnable -> com.aviary.android.feather.widget.ai:
    int mLastFlingX -> a
    com.aviary.android.feather.widget.Wheel this$0 -> b
    void startCommon() -> f
    void stop$1385ff() -> e
    void startUsingDistance(int,int) -> c
    void startUsingVelocity(int,int) -> d
    void endFling(boolean) -> a
    void run() -> run
    boolean computeScrollOffset() -> b
    int getCurrX() -> c
    void forceFinished$1385ff() -> d
    void _startUsingVelocity(int,int) -> a
    void _startUsingDistance(int,int) -> b
    boolean isFinished() -> a
com.aviary.android.feather.widget.Wheel$OnScrollListener -> com.aviary.android.feather.widget.f:
    void onScrollStarted$6f8b4406() -> a_
    void onScroll$6f8b4406(float,int) -> a
    void onScrollFinished$6f8b4406(float,int) -> b
com.aviary.android.feather.widget.Wheel$ScrollSelectionNotifier -> com.aviary.android.feather.widget.az:
    com.aviary.android.feather.widget.Wheel this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.WheelRadio -> com.aviary.android.feather.widget.WheelRadio:
    android.graphics.Shader mShader -> a
    android.graphics.Shader mShader1 -> b
    android.graphics.Bitmap mIndicator -> c
    android.graphics.Paint mPaint -> d
    android.graphics.DrawFilter mFast -> e
    int mPaddingLeft -> f
    int mPaddingRight -> g
    int mLineTickSize -> h
    int mLineBigSize -> i
    int mSmallTicksCount -> j
    int mBigTicksCount -> k
    android.graphics.Rect mRealRect -> l
    boolean mForceLayout -> m
    float mValue -> n
    void setTicksNumber(int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDraw(android.graphics.Canvas) -> onDraw
    void setValue(float) -> a
    float getValue() -> a
com.aviary.android.feather.widget.animation.Flip3dAnimation -> com.aviary.android.feather.widget.a.a:
    float mFromDegrees -> a
    float mToDegrees -> b
    float mCenterX -> c
    float mCenterY -> d
    android.graphics.Camera mCamera -> e
    void initialize(int,int,int,int) -> initialize
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
    boolean willChangeBounds() -> willChangeBounds
    boolean willChangeTransformationMatrix() -> willChangeTransformationMatrix
com.aviary.android.feather.widget.wp.CellLayout -> com.aviary.android.feather.widget.wp.CellLayout:
    int mCellWidth -> a
    int mCellHeight -> b
    int mStartPadding -> c
    int mEndPadding -> d
    int mTopPadding -> e
    int mBottomPadding -> f
    int mAxisRows -> g
    int mAxisCells -> h
    int mWidthGap -> i
    int mHeightGap -> j
    int mCellPaddingH -> k
    int mCellPaddingV -> l
    com.aviary.android.feather.widget.wp.CellLayout$CellInfo mCellInfo -> m
    int[] mCellXY -> n
    boolean[][] mOccupied -> o
    boolean mLastDownOnOccupiedCell -> p
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> q
    void resetCells() -> a
    void setNumCols(int) -> a
    void removeAllViews() -> removeAllViews
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void cancelLongPress() -> cancelLongPress
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    com.aviary.android.feather.widget.wp.CellLayout$CellInfo findVacantCell$7558a314(int) -> b
    boolean findVacantCell(int,int,int,int) -> a
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void onAttachedToWindow() -> onAttachedToWindow
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
    void setEnabled(boolean) -> setEnabled
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
com.aviary.android.feather.widget.wp.CellLayout$CellInfo -> com.aviary.android.feather.widget.wp.e:
    android.view.View cell -> f
    int cellX -> a
    int cellY -> b
    int spanH -> c
    int spanV -> d
    int screen -> e
    android.graphics.Rect current -> g
    java.lang.String toString() -> toString
com.aviary.android.feather.widget.wp.CellLayout$LayoutParams -> com.aviary.android.feather.widget.wp.CellLayout$LayoutParams:
    int cellX -> a
    int cellY -> b
    int cellHSpan -> c
    int cellVSpan -> d
    int x -> e
    int y -> f
    boolean regenerateId -> g
com.aviary.android.feather.widget.wp.EdgeGlow -> com.aviary.android.feather.widget.wp.f:
    android.graphics.drawable.Drawable mEdge -> a
    android.graphics.drawable.Drawable mGlow -> b
    int mWidth -> c
    int mHeight -> d
    float mEdgeAlpha -> e
    float mEdgeScaleY -> f
    float mGlowAlpha -> g
    float mGlowScaleY -> h
    float mEdgeAlphaStart -> i
    float mEdgeAlphaFinish -> j
    float mEdgeScaleYStart -> k
    float mEdgeScaleYFinish -> l
    float mGlowAlphaStart -> m
    float mGlowAlphaFinish -> n
    float mGlowScaleYStart -> o
    float mGlowScaleYFinish -> p
    long mStartTime -> q
    float mDuration -> r
    android.view.animation.Interpolator mInterpolator -> s
    int mState -> t
    float mPullDistance -> u
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void onPull(float) -> a
    void onRelease() -> b
    void onAbsorb(int) -> a
    boolean draw(android.graphics.Canvas) -> a
com.aviary.android.feather.widget.wp.Workspace -> com.aviary.android.feather.widget.wp.Workspace:
    int mDefaultScreen -> a
    int mPaddingLeft -> b
    int mPaddingTop -> c
    int mPaddingRight -> d
    int mPaddingBottom -> e
    boolean mFirstLayout -> f
    int mCurrentScreen -> g
    int mNextScreen -> h
    int mOldSelectedPosition -> i
    android.widget.Scroller mScroller -> j
    android.view.VelocityTracker mVelocityTracker -> k
    float mLastMotionX -> l
    float mLastMotionX2 -> m
    float mLastMotionY -> n
    int mTouchState -> o
    boolean mAllowLongPress -> p
    int mTouchSlop -> q
    int mMaximumVelocity -> r
    int mActivePointerId -> s
    com.aviary.android.feather.widget.wp.WorkspaceIndicator mIndicator -> t
    float SMOOTHING_CONSTANT -> u
    float mSmoothingTime -> v
    float mTouchX -> w
    com.aviary.android.feather.widget.wp.Workspace$WorkspaceOvershootInterpolator mScrollInterpolator -> x
    android.widget.Adapter mAdapter -> y
    android.database.DataSetObserver mObserver -> z
    boolean mDataChanged -> A
    int mFirstPosition -> B
    int mItemCount -> C
    int mItemTypeCount -> D
    com.aviary.android.feather.widget.wp.Workspace$RecycleBin mRecycler -> E
    int mHeightMeasureSpec -> F
    int mWidthMeasureSpec -> G
    com.aviary.android.feather.widget.wp.EdgeGlow mEdgeGlowLeft -> H
    com.aviary.android.feather.widget.wp.EdgeGlow mEdgeGlowRight -> I
    int mOverScrollMode -> J
    boolean mAllowChildSelection -> K
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> L
    com.aviary.android.feather.widget.wp.Workspace$OnPageChangeListener mOnPageChangeListener -> M
    android.view.View mOldSelectedChild -> N
    void setOnPageChangeListener(com.aviary.android.feather.widget.wp.Workspace$OnPageChangeListener) -> a
    void initWorkspace(android.content.Context,android.util.AttributeSet,int) -> a
    android.widget.Adapter getAdapter() -> a
    void setAdapter(android.widget.Adapter) -> a
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,int,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    int getTotalPages() -> b
    void scrollTo(int,int) -> scrollTo
    void computeScroll() -> computeScroll
    void detachOffScreenChildren(boolean) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.View makeAndAddView$4eb1c448(int,int,boolean) -> a
    void setUpChild$1bb98217(android.view.View,int,boolean) -> a
    void fillToGalleryRight() -> c
    void fillToGalleryLeft() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void resetList() -> e
    boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean) -> requestChildRectangleOnScreen
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void setEnabled(boolean) -> setEnabled
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void focusableViewAvailable(android.view.View) -> focusableViewAvailable
    void enableChildrenCache(int,int) -> a
    void clearChildrenCache() -> f
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> b
    void releaseVelocityTracker() -> g
    void snapToScreen(int,int,boolean) -> b
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void setIndicator(com.aviary.android.feather.widget.wp.WorkspaceIndicator) -> a
    void access$0$4ff14a2b(com.aviary.android.feather.widget.wp.Workspace,android.view.View) -> a
    com.aviary.android.feather.widget.wp.Workspace$OnPageChangeListener access$1(com.aviary.android.feather.widget.wp.Workspace) -> a
    int access$2(com.aviary.android.feather.widget.wp.Workspace) -> b
com.aviary.android.feather.widget.wp.Workspace$1 -> com.aviary.android.feather.widget.wp.c:
    com.aviary.android.feather.widget.wp.Workspace this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.wp.Workspace$OnPageChangeListener -> com.aviary.android.feather.widget.wp.a:
    void onPageChanged(int) -> a
com.aviary.android.feather.widget.wp.Workspace$RecycleBin -> com.aviary.android.feather.widget.wp.d:
    android.view.View[][] array -> a
    int[] start -> b
    int[] end -> c
    int maxSize -> d
    boolean[] full -> e
    com.aviary.android.feather.widget.wp.Workspace this$0 -> f
    boolean isEmpty(int) -> b
    void add(int,android.view.View) -> a
    android.view.View remove(int) -> a
    void clear() -> a
com.aviary.android.feather.widget.wp.Workspace$SavedState -> com.aviary.android.feather.widget.wp.Workspace$SavedState:
    int currentScreen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.aviary.android.feather.widget.wp.Workspace$SavedState$1 -> com.aviary.android.feather.widget.wp.h:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.widget.wp.Workspace$WorkspaceDataSetObserver -> com.aviary.android.feather.widget.wp.b:
    com.aviary.android.feather.widget.wp.Workspace this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.wp.Workspace$WorkspaceOvershootInterpolator -> com.aviary.android.feather.widget.wp.g:
    float mTension -> a
    void setDistance(int) -> a
    void disableSettle() -> a
    float getInterpolation(float) -> getInterpolation
com.aviary.android.feather.widget.wp.WorkspaceIndicator -> com.aviary.android.feather.widget.wp.WorkspaceIndicator:
    int mResId -> a
    int mSelected -> b
    void setLevel(int,int) -> a
com.aviary.launcher.MainActivity -> com.aviary.launcher.MainActivity:
    android.widget.Button mButton -> c
    android.widget.Button mButton2 -> d
    android.widget.ImageView mImage -> e
    java.io.File mOutputFile -> f
    android.view.View mImageContainer -> a
    android.net.Uri mImageUri -> b
    int imageWidth -> g
    int imageHeight -> h
    java.io.File mGalleryFolder -> i
    android.os.Handler mHandler -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void loadAsync(android.net.Uri) -> a
    void onDestroy() -> onDestroy
    void onContentChanged() -> onContentChanged
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean setImageURI(android.net.Uri) -> b
    java.lang.String getLibraryVersion() -> a
    void access$1(com.aviary.launcher.MainActivity,android.net.Uri) -> a
    boolean access$3(com.aviary.launcher.MainActivity,android.net.Uri) -> b
    android.os.Handler access$4(com.aviary.launcher.MainActivity) -> a
    void access$5(com.aviary.launcher.MainActivity,android.net.Uri) -> c
com.aviary.launcher.MainActivity$1 -> com.aviary.launcher.b:
    com.aviary.launcher.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.launcher.MainActivity$2 -> com.aviary.launcher.d:
    com.aviary.launcher.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.launcher.MainActivity$3 -> com.aviary.launcher.e:
    com.aviary.launcher.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.launcher.MainActivity$4 -> com.aviary.launcher.c:
    com.aviary.launcher.MainActivity this$0 -> a
    android.net.Uri val$uri -> b
    void run() -> run
com.aviary.launcher.MainActivity$4$1 -> com.aviary.launcher.a:
    com.aviary.launcher.MainActivity$4 this$1 -> a
    android.net.Uri val$uri -> b
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouch -> it.sephiroth.android.library.imagezoom.ImageViewTouch:
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector mScaleDetector -> a
    android.view.GestureDetector mGestureDetector -> b
    int mTouchSlop -> c
    float mCurrentScaleFactor -> d
    float mScaleFactor -> n
    int mDoubleTapDirection -> e
    android.view.GestureDetector$OnGestureListener mGestureListener -> f
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector$OnScaleGestureListener mScaleListener -> g
    boolean mDoubleTapEnabled -> h
    boolean mScaleEnabled -> i
    boolean mScrollEnabled -> j
    void init() -> a
    void setDoubleTapEnabled$1385ff() -> h
    void setScaleEnabled$1385ff() -> i
    void setScrollEnabled$1385ff() -> j
    android.view.GestureDetector$OnGestureListener getGestureListener() -> b
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector$OnScaleGestureListener getScaleListener() -> d
    void onBitmapChanged(android.graphics.drawable.Drawable) -> a
    void _setImageDrawable(android.graphics.drawable.Drawable,boolean,android.graphics.Matrix,float) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onZoom(float) -> b
    float onDoubleTapPost(float,float) -> b
it.sephiroth.android.library.imagezoom.ImageViewTouch$GestureListener -> it.sephiroth.android.library.imagezoom.e:
    it.sephiroth.android.library.imagezoom.ImageViewTouch this$0 -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
it.sephiroth.android.library.imagezoom.ImageViewTouch$ScaleListener -> it.sephiroth.android.library.imagezoom.f:
    it.sephiroth.android.library.imagezoom.ImageViewTouch this$0 -> a
    boolean onScale(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> a
it.sephiroth.android.library.imagezoom.ImageViewTouchBase -> it.sephiroth.android.library.imagezoom.ImageViewTouchBase:
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> k
    android.graphics.Matrix mBaseMatrix -> a
    android.graphics.Matrix mSuppMatrix -> l
    android.os.Handler mHandler -> m
    java.lang.Runnable mOnLayoutRunnable -> b
    float mMaxZoom -> c
    android.graphics.Matrix mDisplayMatrix -> d
    float[] mMatrixValues -> e
    int mThisWidth -> f
    int mThisHeight -> g
    boolean mFitToScreen -> h
    float MAX_ZOOM -> i
    android.graphics.RectF mBitmapRect -> j
    android.graphics.RectF mCenterRect -> n
    android.graphics.RectF mScrollRect -> o
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnBitmapChangedListener mListener -> p
    void setOnBitmapChangedListener(it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnBitmapChangedListener) -> a
    void init() -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setImageBitmap(android.graphics.Bitmap,boolean) -> a
    void setImageBitmap(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void setImageBitmap(android.graphics.Bitmap,boolean,android.graphics.Matrix,float) -> a
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageDrawable(android.graphics.drawable.Drawable,boolean,android.graphics.Matrix,float) -> b
    void _setImageDrawable(android.graphics.drawable.Drawable,boolean,android.graphics.Matrix,float) -> a
    void onBitmapChanged(android.graphics.drawable.Drawable) -> a
    float getMaxZoom() -> k
    android.graphics.Matrix getImageViewMatrix() -> l
    android.graphics.Matrix getDisplayMatrix() -> m
    void getProperBaseMatrix(android.graphics.drawable.Drawable,android.graphics.Matrix) -> a
    void getProperBaseMatrix2(android.graphics.drawable.Drawable,android.graphics.Matrix) -> b
    android.graphics.RectF getBitmapRect() -> b
    float getRotation() -> getRotation
    float getScale() -> n
    void center$25decb5() -> c
    android.graphics.RectF getCenter$70520eee() -> o
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    void zoomTo$2548a35() -> p
    void zoomTo(float,float,float) -> b
    void onZoom(float) -> b
    void scrollBy(float,float) -> c
    void panBy(double,double) -> a
    void scrollBy$483d1ca9(float,float) -> d
    void zoomTo(float,float,float,float) -> a
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$1 -> it.sephiroth.android.library.imagezoom.c:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> a
    android.graphics.drawable.Drawable val$drawable -> b
    boolean val$reset -> c
    android.graphics.Matrix val$initial_matrix -> d
    float val$maxZoom -> e
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$2 -> it.sephiroth.android.library.imagezoom.a:
    double old_x -> a
    double old_y -> b
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> c
    double val$durationMs -> d
    long val$startTime -> e
    double val$dx -> f
    double val$dy -> g
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$3 -> it.sephiroth.android.library.imagezoom.b:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> a
    float val$durationMs -> b
    long val$startTime -> c
    float val$oldScale -> d
    float val$incrementPerMs -> e
    float val$centerX -> f
    float val$centerY -> g
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnBitmapChangedListener -> it.sephiroth.android.library.imagezoom.g:
    void onBitmapChanged$130e17e7() -> a
it.sephiroth.android.library.imagezoom.ScaleGestureDetector -> it.sephiroth.android.library.imagezoom.i:
    android.content.Context mContext -> a
    it.sephiroth.android.library.imagezoom.ScaleGestureDetector$OnScaleGestureListener mListener -> b
    boolean mGestureInProgress -> c
    android.view.MotionEvent mPrevEvent -> d
    android.view.MotionEvent mCurrEvent -> e
    float mFocusX -> f
    float mFocusY -> g
    float mPrevFingerDiffX -> h
    float mPrevFingerDiffY -> i
    float mCurrFingerDiffX -> j
    float mCurrFingerDiffY -> k
    float mCurrLen -> l
    float mPrevLen -> m
    float mScaleFactor -> n
    float mCurrPressure -> o
    float mPrevPressure -> p
    long mTimeDelta -> q
    float mEdgeSlop -> r
    float mRightSlopEdge -> s
    float mBottomSlopEdge -> t
    boolean mSloppyGesture -> u
    boolean mInvalidGesture -> v
    int mActiveId0 -> w
    int mActiveId1 -> x
    boolean mActive0MostRecent -> y
    boolean onTouchEvent(android.view.MotionEvent) -> a
    int findNewActiveIndex(android.view.MotionEvent,int,int) -> a
    float getRawX(android.view.MotionEvent,int) -> a
    float getRawY(android.view.MotionEvent,int) -> b
    void setContext(android.view.MotionEvent) -> b
    void reset() -> g
    boolean isInProgress() -> a
    float getFocusX() -> b
    float getFocusY() -> c
    float getCurrentSpan() -> d
    float getPreviousSpan() -> e
    float getScaleFactor() -> f
it.sephiroth.android.library.imagezoom.ScaleGestureDetector$OnScaleGestureListener -> it.sephiroth.android.library.imagezoom.h:
    boolean onScale(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> a
    boolean onScaleBegin(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> b
    void onScaleEnd(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> c
it.sephiroth.android.library.imagezoom.ScaleGestureDetector$SimpleOnScaleGestureListener -> it.sephiroth.android.library.imagezoom.d:
    boolean onScale(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> a
    boolean onScaleBegin(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> b
    void onScaleEnd(it.sephiroth.android.library.imagezoom.ScaleGestureDetector) -> c
it.sephiroth.android.library.imagezoom.easing.Cubic -> it.sephiroth.android.library.imagezoom.a.b:
    double easeOut$441f079d(double,double,double) -> a
    double easeInOut(double,double,double,double) -> a
it.sephiroth.android.library.imagezoom.easing.Easing -> it.sephiroth.android.library.imagezoom.a.a:
    double easeOut$441f079d(double,double,double) -> a
    double easeInOut(double,double,double,double) -> a
it.sephiroth.android.library.imagezoom.easing.Expo -> it.sephiroth.android.library.imagezoom.a.c:
    double easeOut$441f079d(double,double,double) -> a
    double easeInOut(double,double,double,double) -> a
it.sephiroth.android.library.imagezoom.easing.Sine -> it.sephiroth.android.library.imagezoom.a.d:
    double easeOut$441f079d(double,double,double) -> a
    double easeInOut(double,double,double,double) -> a
